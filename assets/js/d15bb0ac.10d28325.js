"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[51781],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(96540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}},59431:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=t(74848),r=t(28453);const o={title:"Integration",sidebar_label:"Integration",sidebar_position:2,slug:"/ibc/integration"},s="Integration",a={id:"ibc/integration",title:"Integration",description:"Learn how to integrate IBC to your application",source:"@site/docs/01-ibc/02-integration.md",sourceDirName:"01-ibc",slug:"/ibc/integration",permalink:"/main/ibc/integration",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Integration",sidebar_label:"Integration",sidebar_position:2,slug:"/ibc/integration"},sidebar:"defaultSidebar",previous:{title:"Overview",permalink:"/main/ibc/overview"},next:{title:"IBC v2 Applications",permalink:"/main/ibc/apps/ibcv2apps"}},c={},l=[{value:"Integrating the IBC module",id:"integrating-the-ibc-module",level:2},{value:"Add application fields to <code>App</code>",id:"add-application-fields-to-app",level:3},{value:"Configure the <code>Keeper</code>s",id:"configure-the-keepers",level:3},{value:"Create Application Stacks with Middleware",id:"create-application-stacks-with-middleware",level:3},{value:"IBC v2 Application Stack",id:"ibc-v2-application-stack",level:4},{value:"Register module routes in the IBC <code>Router</code>",id:"register-module-routes-in-the-ibc-router",level:3},{value:"IBC v2 Router",id:"ibc-v2-router",level:4},{value:"Module <code>Manager</code> and <code>SimulationManager</code>",id:"module-manager-and-simulationmanager",level:3},{value:"Module account permissions",id:"module-account-permissions",level:3},{value:"Integrating light clients",id:"integrating-light-clients",level:3},{value:"Allowed Clients Params",id:"allowed-clients-params",level:4},{value:"Application ABCI ordering",id:"application-abci-ordering",level:3}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"integration",children:"Integration"}),"\n",(0,i.jsx)(n.admonition,{title:"Synopsis",type:"note",children:(0,i.jsx)(n.p,{children:"Learn how to integrate IBC to your application"})}),"\n",(0,i.jsxs)(n.p,{children:["This document outlines the required steps to integrate and configure the ",(0,i.jsx)(n.a,{href:"https://github.com/cosmos/ibc-go/tree/main/modules/core",children:"IBC\nmodule"})," to your Cosmos SDK application and enable sending fungible token transfers to other chains. An ",(0,i.jsx)(n.a,{href:"https://github.com/gjermundgaraba/probe/tree/ibc/v10",children:"example app using ibc-go v10 is linked"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"integrating-the-ibc-module",children:"Integrating the IBC module"}),"\n",(0,i.jsx)(n.p,{children:"Integrating the IBC module to your SDK-based application is straightforward. The general changes can be summarized in the following steps:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.a,{href:"#add-application-fields-to-app",children:["Define additional ",(0,i.jsx)(n.code,{children:"Keeper"})," fields for the new modules on the ",(0,i.jsx)(n.code,{children:"App"})," type"]}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.a,{href:"#configure-the-keepers",children:["Add the module's ",(0,i.jsx)(n.code,{children:"StoreKey"}),"s and initialize their ",(0,i.jsx)(n.code,{children:"Keeper"}),"s"]}),"."]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#create-application-stacks-with-middleware",children:"Create Application Stacks with Middleware"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.a,{href:"#register-module-routes-in-the-ibc-router",children:["Set up IBC router and add route for the ",(0,i.jsx)(n.code,{children:"transfer"})," module"]}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.a,{href:"#module-account-permissions",children:["Grant permissions to ",(0,i.jsx)(n.code,{children:"transfer"}),"'s ",(0,i.jsx)(n.code,{children:"ModuleAccount"})]}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.a,{href:"#module-manager-and-simulationmanager",children:["Add the modules to the module ",(0,i.jsx)(n.code,{children:"Manager"})]}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.a,{href:"#module-manager-and-simulationmanager",children:["Update the module ",(0,i.jsx)(n.code,{children:"SimulationManager"})," to enable simulations"]}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.a,{href:"#integrating-light-clients",children:["Integrate light client modules (e.g. ",(0,i.jsx)(n.code,{children:"07-tendermint"}),")"]}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.a,{href:"#application-abci-ordering",children:["Add modules to ",(0,i.jsx)(n.code,{children:"Begin/EndBlockers"})," and ",(0,i.jsx)(n.code,{children:"InitGenesis"})]}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"add-application-fields-to-app",children:["Add application fields to ",(0,i.jsx)(n.code,{children:"App"})]}),"\n",(0,i.jsxs)(n.p,{children:["We need to register the core ",(0,i.jsx)(n.code,{children:"ibc"})," and ",(0,i.jsx)(n.code,{children:"transfer"})," ",(0,i.jsx)(n.code,{children:"Keeper"}),"s. To support the use of IBC v2, ",(0,i.jsx)(n.code,{children:"transferv2"})," and ",(0,i.jsx)(n.code,{children:"callbacksv2"})," must also be registered as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",metastring:'title="app.go"',children:'import (\n  // other imports\n  // ...\n  ibckeeper "github.com/cosmos/ibc-go/v10/modules/core/keeper"\n  ibctransferkeeper "github.com/cosmos/ibc-go/v10/modules/apps/transfer/keeper"\n  // ibc v2 imports\n  transferv2 "github.com/cosmos/ibc-go/v10/modules/apps/transfer/v2"\n  ibccallbacksv2 "github.com/cosmos/ibc-go/v10/modules/apps/callbacks/v2"\n)\n\ntype App struct {\n  // baseapp, keys and subspaces definitions\n\n  // other keepers\n  // ...\n  IBCKeeper        *ibckeeper.Keeper // IBC Keeper must be a pointer in the app, so we can SetRouter on it correctly\n  TransferKeeper   ibctransferkeeper.Keeper // for cross-chain fungible token transfers\n\n  // ...\n  // module and simulation manager definitions\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"configure-the-keepers",children:["Configure the ",(0,i.jsx)(n.code,{children:"Keeper"}),"s"]}),"\n",(0,i.jsxs)(n.p,{children:["Initialize the IBC ",(0,i.jsx)(n.code,{children:"Keeper"}),"s (for core ",(0,i.jsx)(n.code,{children:"ibc"})," and ",(0,i.jsx)(n.code,{children:"transfer"})," modules), and any additional modules you want to include."]}),"\n",(0,i.jsx)(n.admonition,{title:"Notice",type:"note",children:(0,i.jsxs)(n.p,{children:["The capability module has been removed in ibc-go v10, therefore the ",(0,i.jsx)(n.code,{children:"ScopedKeeper"})," has also been removed"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import (\n  // other imports\n  // ...\n  authtypes "github.com/cosmos/cosmos-sdk/x/auth/types"\n\n  ibcexported "github.com/cosmos/ibc-go/v10/modules/core/exported"\n  ibckeeper "github.com/cosmos/ibc-go/v10/modules/core/keeper"\n  "github.com/cosmos/ibc-go/v10/modules/apps/transfer"\n  ibctransfertypes "github.com/cosmos/ibc-go/v10/modules/apps/transfer/types"\n  ibctm "github.com/cosmos/ibc-go/v10/modules/light-clients/07-tendermint"\n)\n\nfunc NewApp(...args) *App {\n  // define codecs and baseapp\n\n  // ... other module keepers\n\n  // Create IBC Keeper\n  app.IBCKeeper = ibckeeper.NewKeeper(\n\t\tappCodec,\n\t\truntime.NewKVStoreService(keys[ibcexported.StoreKey]),\n\t\tapp.GetSubspace(ibcexported.ModuleName),\n\t\tapp.UpgradeKeeper,\n\t\tauthtypes.NewModuleAddress(govtypes.ModuleName).String(),\n\t)\n\n  // Create Transfer Keeper\n  app.TransferKeeper = ibctransferkeeper.NewKeeper(\n\t\tappCodec,\n\t\truntime.NewKVStoreService(keys[ibctransfertypes.StoreKey]),\n\t\tapp.GetSubspace(ibctransfertypes.ModuleName),\n\t\tapp.IBCKeeper.ChannelKeeper,\n\t\tapp.IBCKeeper.ChannelKeeper,\n\t\tapp.MsgServiceRouter(),\n\t\tapp.AccountKeeper,\n\t\tapp.BankKeeper,\n\t\tauthtypes.NewModuleAddress(govtypes.ModuleName).String(),\n\t)\n\n  // ... continues\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"create-application-stacks-with-middleware",children:"Create Application Stacks with Middleware"}),"\n",(0,i.jsxs)(n.p,{children:["Middleware stacks in IBC allow you to wrap an ",(0,i.jsx)(n.code,{children:"IBCModule"})," with additional logic for packets and acknowledgements. This is a chain of handlers that execute in order. The transfer stack below shows how to wire up transfer to use packet forward middleware, and the callbacks middleware. Note that the order is important."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Create Transfer Stack for IBC Classic\nmaxCallbackGas := uint64(10_000_000)\nwasmStackIBCHandler := wasm.NewIBCHandler(app.WasmKeeper, app.IBCKeeper.ChannelKeeper, app.IBCKeeper.ChannelKeeper)\n\nvar transferStack porttypes.IBCModule\ntransferStack = transfer.NewIBCModule(app.TransferKeeper)\n// callbacks wraps the transfer stack as its base app, and uses PacketForwardKeeper as the ICS4Wrapper\n// i.e. packet-forward-middleware is higher on the stack and sits between callbacks and the ibc channel keeper\n// Since this is the lowest level middleware of the transfer stack, it should be the first entrypoint for transfer keeper's\n// WriteAcknowledgement.\ncbStack := ibccallbacks.NewIBCMiddleware(transferStack, app.PacketForwardKeeper, wasmStackIBCHandler, maxCallbackGas)\ntransferStack = packetforward.NewIBCMiddleware(\n  cbStack,\n  app.PacketForwardKeeper,\n  0, // retries on timeout\n  packetforwardkeeper.DefaultForwardTransferPacketTimeoutTimestamp,\n)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"ibc-v2-application-stack",children:"IBC v2 Application Stack"}),"\n",(0,i.jsx)(n.p,{children:"For IBC v2, an example transfer stack is shown below. In this case the transfer stack is using the callbacks middleware."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Create IBC v2 transfer middleware stack\n// the callbacks gas limit is recommended to be 10M for use with wasm contracts\nmaxCallbackGas := uint64(10_000_000)\nwasmStackIBCHandler := wasm.NewIBCHandler(app.WasmKeeper, app.IBCKeeper.ChannelKeeper, app.IBCKeeper.ChannelKeeper)\n\nvar ibcv2TransferStack ibcapi.IBCModule\n\tibcv2TransferStack = transferv2.NewIBCModule(app.TransferKeeper)\n\tibcv2TransferStack = ibccallbacksv2.NewIBCMiddleware(transferv2.NewIBCModule(app.TransferKeeper), app.IBCKeeper.ChannelKeeperV2, wasmStackIBCHandler, app.IBCKeeper.ChannelKeeperV2, maxCallbackGas)\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"register-module-routes-in-the-ibc-router",children:["Register module routes in the IBC ",(0,i.jsx)(n.code,{children:"Router"})]}),"\n",(0,i.jsxs)(n.p,{children:["IBC needs to know which module is bound to which port so that it can route packets to the\nappropriate module and call the appropriate callbacks. The port to module name mapping is handled by\nIBC's port ",(0,i.jsx)(n.code,{children:"Keeper"}),". However, the mapping from module name to the relevant callbacks is accomplished\nby the port\n",(0,i.jsx)(n.a,{href:"https://github.com/cosmos/ibc-go/blob/main/modules/core/05-port/types/router.go",children:(0,i.jsx)(n.code,{children:"Router"})})," on the\n",(0,i.jsx)(n.code,{children:"ibc"})," module."]}),"\n",(0,i.jsx)(n.p,{children:"Adding the module routes allows the IBC handler to call the appropriate callback when processing a channel handshake or a packet."}),"\n",(0,i.jsxs)(n.p,{children:["Currently, a ",(0,i.jsx)(n.code,{children:"Router"})," is static so it must be initialized and set correctly on app initialization.\nOnce the ",(0,i.jsx)(n.code,{children:"Router"})," has been set, no new routes can be added."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",metastring:'title="app.go"',children:'import (\n  // other imports\n  // ...\n  porttypes "github.com/cosmos/ibc-go/v10/modules/core/05-port/types" \n  ibctransfertypes "github.com/cosmos/ibc-go/v10/modules/apps/transfer/types"\n)\n\nfunc NewApp(...args) *App {\n  // .. continuation from above\n\n  // Create static IBC router, add transfer module route, then set and seal it\n  ibcRouter := porttypes.NewRouter()\n\tibcRouter.AddRoute(ibctransfertypes.ModuleName, transferStack)\n  // Setting Router will finalize all routes by sealing router\n  // No more routes can be added\n  app.IBCKeeper.SetRouter(ibcRouter)\n\n  // ... continues\n'})}),"\n",(0,i.jsx)(n.h4,{id:"ibc-v2-router",children:"IBC v2 Router"}),"\n",(0,i.jsxs)(n.p,{children:["With IBC v2, there is a new ",(0,i.jsx)(n.a,{href:"https://github.com/cosmos/ibc-go/blob/main/modules/core/api/router.go",children:"router"})," that needs to register the routes for a portID to a given IBCModule. It supports two kinds of routes: direct routes and prefix-based routes. The direct routes match one specific port ID to a module, while the prefix-based routes match any port ID with a specific prefix to a module.\nFor example, if a direct route named ",(0,i.jsx)(n.code,{children:"someModule"})," exists, only messages addressed to exactly that port ID will be passed to the corresponding module.\nHowever, if instead, ",(0,i.jsx)(n.code,{children:"someModule"})," is a prefix-based route, port IDs like ",(0,i.jsx)(n.code,{children:"someModuleRandomPort1"}),", ",(0,i.jsx)(n.code,{children:"someModuleRandomPort2"}),", etc., will be passed to the module.\nNote that the router will panic when you add a route that conflicts with an already existing route. This is also the case if you add a prefix-based route that conflicts with an existing direct route or vice versa."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// IBC v2 router creation\n\tibcRouterV2 := ibcapi.NewRouter()\n\tibcRouterV2.AddRoute(ibctransfertypes.PortID, ibcv2TransferStack)\n  // Setting Router will finalize all routes by sealing router\n  // No more routes can be added\n\tapp.IBCKeeper.SetRouterV2(ibcRouterV2)\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"module-manager-and-simulationmanager",children:["Module ",(0,i.jsx)(n.code,{children:"Manager"})," and ",(0,i.jsx)(n.code,{children:"SimulationManager"})]}),"\n",(0,i.jsxs)(n.p,{children:["In order to use IBC, we need to add the new modules to the module ",(0,i.jsx)(n.code,{children:"Manager"})," and to the ",(0,i.jsx)(n.code,{children:"SimulationManager"}),", in case your application supports ",(0,i.jsx)(n.a,{href:"https://docs.cosmos.network/main/learn/advanced/simulation",children:"simulations"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",metastring:'title="app.go"',children:'import (\n  // other imports\n  // ...\n  "github.com/cosmos/cosmos-sdk/types/module"\n\n  ibc "github.com/cosmos/ibc-go/v10/modules/core"\n  "github.com/cosmos/ibc-go/v10/modules/apps/transfer"\n)\n\nfunc NewApp(...args) *App {\n  // ... continuation from above\n\n  app.ModuleManager = module.NewManager(\n    // other modules\n    // ...\n    // highlight-start\n+   ibc.NewAppModule(app.IBCKeeper),\n+   transfer.NewAppModule(app.TransferKeeper),\n    // highlight-end\n  )\n\n  // ...\n\n  app.simulationManager = module.NewSimulationManagerFromAppModules(\n    // other modules\n    // ...\n    app.ModuleManager.Modules,\n    map[string]module.AppModuleSimulation{},\n  )\n\n  // ... continues\n'})}),"\n",(0,i.jsx)(n.h3,{id:"module-account-permissions",children:"Module account permissions"}),"\n",(0,i.jsxs)(n.p,{children:["After that, we need to grant ",(0,i.jsx)(n.code,{children:"Minter"})," and ",(0,i.jsx)(n.code,{children:"Burner"})," permissions to\nthe ",(0,i.jsx)(n.code,{children:"transfer"})," ",(0,i.jsx)(n.code,{children:"ModuleAccount"})," to mint and burn relayed tokens."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",metastring:'title="app.go"',children:'import (\n  // other imports\n  // ...\n  "github.com/cosmos/cosmos-sdk/types/module"\n  authtypes "github.com/cosmos/cosmos-sdk/x/auth/types"\n\n  // highlight-next-line\n+ ibctransfertypes "github.com/cosmos/ibc-go/v10/modules/apps/transfer/types"\n)\n\n// app.go\nvar (\n  // module account permissions\n  maccPerms = map[string][]string{\n    // other module accounts permissions\n    // ...\n    ibctransfertypes.ModuleName: {authtypes.Minter, authtypes.Burner},\n  }\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"integrating-light-clients",children:"Integrating light clients"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Note that from v10 onwards, all light clients are expected to implement the ",(0,i.jsxs)(n.a,{href:"/main/ibc/light-clients/light-client-module#implementing-the-lightclientmodule-interface",children:[(0,i.jsx)(n.code,{children:"LightClientInterface"})," interface"]})," defined by core IBC, and have to be explicitly registered in a chain's app.go. This is in contrast to earlier versions of ibc-go when ",(0,i.jsx)(n.code,{children:"07-tendermint"})," and ",(0,i.jsx)(n.code,{children:"06-solomachine"})," were added out of the box. Follow the steps below to integrate the ",(0,i.jsx)(n.code,{children:"07-tendermint"})," light client."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["All light clients must be registered with ",(0,i.jsx)(n.code,{children:"module.Manager"})," in a chain's app.go file. The following code example shows how to instantiate ",(0,i.jsx)(n.code,{children:"07-tendermint"})," light client module and register its ",(0,i.jsx)(n.code,{children:"ibctm.AppModule"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",metastring:'title="app.go"',children:'import (\n  // other imports\n  // ...\n  "github.com/cosmos/cosmos-sdk/types/module"\n  // highlight-next-line\n+ ibctm "github.com/cosmos/ibc-go/v10/modules/light-clients/07-tendermint"\n)\n\n// app.go\n// after sealing the IBC router\nclientKeeper := app.IBCKeeper.ClientKeeper\nstoreProvider := app.IBCKeeper.ClientKeeper.GetStoreProvider()\n\ntmLightClientModule := ibctm.NewLightClientModule(appCodec, storeProvider)\nclientKeeper.AddRoute(ibctm.ModuleName, &tmLightClientModule)\n// ...\napp.ModuleManager = module.NewManager(\n  // ...\n  ibc.NewAppModule(app.IBCKeeper),\n  transfer.NewAppModule(app.TransferKeeper), // i.e ibc-transfer module\n\n  // register light clients on IBC\n  // highlight-next-line\n+ ibctm.NewAppModule(tmLightClientModule),\n)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"allowed-clients-params",children:"Allowed Clients Params"}),"\n",(0,i.jsxs)(n.p,{children:["The allowed clients parameter defines an allow list of client types supported by the chain. The\ndefault value is a single-element list containing the ",(0,i.jsx)(n.a,{href:"https://github.com/cosmos/ibc-go/blob/main/modules/core/02-client/types/client.pb.go#L248-L253",children:(0,i.jsx)(n.code,{children:"AllowedClients"})})," wildcard (",(0,i.jsx)(n.code,{children:'"*"'}),"). Alternatively, the parameter\nmay be set with a list of client types (e.g. ",(0,i.jsx)(n.code,{children:'"06-solomachine","07-tendermint","09-localhost"'}),").\nA client type that is not registered on this list will fail upon creation or on genesis validation.\nNote that, since the client type is an arbitrary string, chains must not register two light clients\nwhich return the same value for the ",(0,i.jsx)(n.code,{children:"ClientType()"})," function, otherwise the allow list check can be\nbypassed."]}),"\n",(0,i.jsx)(n.h3,{id:"application-abci-ordering",children:"Application ABCI ordering"}),"\n",(0,i.jsxs)(n.p,{children:["One addition from IBC is the concept of ",(0,i.jsx)(n.code,{children:"HistoricalInfo"})," which is stored in the Cosmos SDK ",(0,i.jsx)(n.code,{children:"x/staking"})," module. The number of records stored by ",(0,i.jsx)(n.code,{children:"x/staking"})," is controlled by the ",(0,i.jsx)(n.code,{children:"HistoricalEntries"})," parameter which stores ",(0,i.jsx)(n.code,{children:"HistoricalInfo"})," on a per-height basis.\nEach entry contains the historical information for the ",(0,i.jsx)(n.code,{children:"Header"})," and ",(0,i.jsx)(n.code,{children:"ValidatorSet"})," of this chain which is stored\nat each height during the ",(0,i.jsx)(n.code,{children:"BeginBlock"})," call. The ",(0,i.jsx)(n.code,{children:"HistoricalInfo"})," is required to introspect a blockchain's prior state at a given height in order to verify the light client ",(0,i.jsx)(n.code,{children:"ConsensusState"})," during the\nconnection handshake."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",metastring:'title="app.go"',children:'import (\n  // other imports\n  // ...\n  stakingtypes "github.com/cosmos/cosmos-sdk/x/staking/types"\n  ibcexported "github.com/cosmos/ibc-go/v10/modules/core/exported"\n  ibckeeper "github.com/cosmos/ibc-go/v10/modules/core/keeper"\n  ibctransfertypes "github.com/cosmos/ibc-go/v10/modules/apps/transfer/types"\n)\n\nfunc NewApp(...args) *App {\n  // ... continuation from above\n\n  // add x/staking, ibc and transfer modules to BeginBlockers\n  app.ModuleManager.SetOrderBeginBlockers(\n    // other modules ...\n    stakingtypes.ModuleName,\n    ibcexported.ModuleName,\n    ibctransfertypes.ModuleName,\n  )\n  app.ModuleManager.SetOrderEndBlockers(\n    // other modules ...\n    stakingtypes.ModuleName,\n    ibcexported.ModuleName,\n    ibctransfertypes.ModuleName,\n  )\n\n  // ...\n\n  genesisModuleOrder := []string{\n    // other modules\n    // ...\n    ibcexported.ModuleName,\n    ibctransfertypes.ModuleName,\n  }\n  app.ModuleManager.SetOrderInitGenesis(genesisModuleOrder...)\n\n  // ... continues\n'})}),"\n",(0,i.jsxs)(n.p,{children:["That's it! You have now wired up the IBC module and the ",(0,i.jsx)(n.code,{children:"transfer"})," module, and are now able to send fungible tokens across\ndifferent chains. If you want to have a broader view of the changes take a look into the SDK's\n",(0,i.jsx)(n.a,{href:"https://github.com/cosmos/ibc-go/blob/main/testing/simapp/app.go",children:(0,i.jsx)(n.code,{children:"SimApp"})}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);