"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[72735],{28453:(e,r,n)=>{n.d(r,{R:()=>p,x:()=>o});var t=n(96540);const a={},i=t.createContext(a);function p(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:p(e.components),t.createElement(i.Provider,{value:r},e.children)}},49238:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>p,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var t=n(74848),a=n(28453);const i={title:"IBC-Go v8.1 to v10",sidebar_label:"IBC-Go v8.1 to v10",sidebar_position:13,slug:"/migrations/v8_1-to-v10"},p="Migrating from v8.1 to v10",o={id:"migrations/v8_1-to-v10",title:"IBC-Go v8.1 to v10",description:"This guide provides instructions for migrating to a new version of ibc-go.",source:"@site/docs/05-migrations/13-v8_1-to-v10.md",sourceDirName:"05-migrations",slug:"/migrations/v8_1-to-v10",permalink:"/main/migrations/v8_1-to-v10",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:13,frontMatter:{title:"IBC-Go v8.1 to v10",sidebar_label:"IBC-Go v8.1 to v10",sidebar_position:13,slug:"/migrations/v8_1-to-v10"},sidebar:"defaultSidebar",previous:{title:"IBC-Go v8 to v8.1",permalink:"/main/migrations/v8-to-v8_1"},next:{title:"IBC-Go v10 to v11",permalink:"/main/migrations/v10-to-v11"}},s={},c=[];function l(e){const r={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"migrating-from-v81-to-v10",children:"Migrating from v8.1 to v10"}),"\n",(0,t.jsx)(r.p,{children:"This guide provides instructions for migrating to a new version of ibc-go."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Note:"})," ibc-go supports golang semantic versioning and therefore all imports must be updated on major version releases. In addition, for this release, the 08-wasm module has been released as v10, and the callbacks middleware has been moved into the ibc-go module itself."]}),"\n",(0,t.jsx)(r.p,{children:"Diff examples are shown after the list of overall changes:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"To add support for IBC v2, Chains will need to wire up a new IBC v2 Transfer stack"}),"\n",(0,t.jsx)(r.li,{children:"Chains will need to wire up the new light client modules"}),"\n",(0,t.jsx)(r.li,{children:"Chains will need to update Keeper construction calls to comply with the new signatures"}),"\n",(0,t.jsxs)(r.li,{children:["Chains will need to remove the route for the legacy proposal handler for 02-client from their ",(0,t.jsx)(r.code,{children:"app/app.go"})]}),"\n",(0,t.jsxs)(r.li,{children:["Chains will need to remove the capability keeper and all related setup, including the scoped keepers from their ",(0,t.jsx)(r.code,{children:"app/app.go"})]}),"\n",(0,t.jsx)(r.li,{children:"Chains will need to remove ibc fee middleware (29-fee)"}),"\n",(0,t.jsxs)(r.li,{children:["Chains will need, if using this module, to update their imports and usage of ",(0,t.jsx)(r.code,{children:"github.com/cosmos/ibc-go/modules/light-clients/08-wasm/"})," to ",(0,t.jsx)(r.code,{children:"github.com/cosmos/ibc-go/modules/light-clients/08-wasm/v10"})]}),"\n",(0,t.jsxs)(r.li,{children:["Chains will need, if using this module, to update their imports and usage of ",(0,t.jsx)(r.code,{children:"github.com/cosmos/ibc-go/modules/apps/callbacks"})," to ",(0,t.jsx)(r.code,{children:"github.com/cosmos/ibc-go/v10/modules/apps/callbacks"})]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"To add IBC v2 support, wire up a new transfer stack. Example below showing wired up with IBC Callbacks module:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"+ var ibcv2TransferStack ibcapi.IBCModule\n+ ibcv2TransferStack = transferv2.NewIBCModule(app.TransferKeeper)\n+ ibcv2TransferStack = ibccallbacksv2.NewIBCMiddleware(\n+   transferv2.NewIBCModule(app.TransferKeeper),\n+   app.IBCKeeper.ChannelKeeperV2,\n+   wasmStackIBCHandler,\n+   app.IBCKeeper.ChannelKeeperV2,\n+   maxCallbackGas,\n+ )\n"})}),"\n",(0,t.jsx)(r.p,{children:"Wire up each light client as a separate module and add them to the client keeper router. Example below for 07-tendermint and 08-wasm:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"+ // Light client modules\n+ clientKeeper := app.IBCKeeper.ClientKeeper\n+ storeProvider := app.IBCKeeper.ClientKeeper.GetStoreProvider()\n+\n+ tmLightClientModule := ibctm.NewLightClientModule(appCodec, storeProvider)\n+ clientKeeper.AddRoute(ibctm.ModuleName, &tmLightClientModule)\n+\n+ wasmLightClientModule := ibcwasm.NewLightClientModule(app.WasmClientKeeper, storeProvider)\n+ clientKeeper.AddRoute(ibcwasmtypes.ModuleName, &wasmLightClientModule)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Remove ibc fee module name (if used) from module account permissions:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"  // app.go\n  ...\n  // module account permissions\n  var maccPerms = map[string][]string{\n    ...\n-   ibcfeetypes.ModuleName:      nil,\n    ...\n  }\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Remove ",(0,t.jsx)(r.code,{children:"CapabilityKeeper"}),", ",(0,t.jsx)(r.code,{children:"IBCFeeKeeper"})," and all ",(0,t.jsx)(r.code,{children:"capabilitykeeper.ScopedKeeper"})," Scoped keepers from the App struct:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"  // ChainApp extended ABCI application\n  type ChainApp struct {\n    ...\n-\tCapabilityKeeper      *capabilitykeeper.Keeper\n    ...\n-   IBCFeeKeeper        ibcfeekeeper.Keeper\n    ...\n-   ScopedIBCKeeper           capabilitykeeper.ScopedKeeper\n-\tScopedICAHostKeeper       capabilitykeeper.ScopedKeeper\n-\tScopedICAControllerKeeper capabilitykeeper.ScopedKeeper\n-\tScopedTransferKeeper      capabilitykeeper.ScopedKeeper\n-\tScopedIBCFeeKeeper        capabilitykeeper.ScopedKeeper\n    ...\n  }\n  ...\n- app.ScopedIBCKeeper = scopedIBCKeeper\n- app.ScopedTransferKeeper = scopedTransferKeeper\n- app.ScopedWasmKeeper = scopedWasmKeeper\n- app.ScopedICAHostKeeper = scopedICAHostKeeper\n- app.ScopedICAControllerKeeper = scopedICAControllerKeeper\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Remove capability and ibc fee middleware store keys from the ",(0,t.jsx)(r.code,{children:"NewKVStoreKeys"})," call:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"...\n  keys := storetypes.NewKVStoreKeys(\n    ...\n-   capabilitytypes.StoreKey,\n-   ibcfeetypes.StoreKey,\n    ...\n  }\n"})}),"\n",(0,t.jsx)(r.p,{children:"Remove the in-memory store keys previously used by the capability module:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"- memKeys := storetypes.NewMemoryStoreKeys(capabilitytypes.MemStoreKey)\n...\n- app.MountMemoryStores(memKeys)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Remove creation of the capability keeper:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"- // add capability keeper and ScopeToModule for ibc module\n- \tapp.CapabilityKeeper = capabilitykeeper.NewKeeper(\n- \t\tappCodec,\n- \t\tkeys[capabilitytypes.StoreKey],\n- \t\tmemKeys[capabilitytypes.MemStoreKey],\n- \t)\n\n- \tscopedIBCKeeper := app.CapabilityKeeper.ScopeToModule(ibcexported.ModuleName)\n- \tscopedICAHostKeeper := app.CapabilityKeeper.ScopeToModule(icahosttypes.SubModuleName)\n- \tscopedICAControllerKeeper := app.CapabilityKeeper.ScopeToModule(icacontrollertypes.SubModuleName)\n- \tscopedTransferKeeper := app.CapabilityKeeper.ScopeToModule(ibctransfertypes.ModuleName)\n- \tscopedWasmKeeper := app.CapabilityKeeper.ScopeToModule(wasmtypes.ModuleName)\n- \tapp.CapabilityKeeper.Seal()\n"})}),"\n",(0,t.jsx)(r.p,{children:"Remove the legacy route for the client keeper:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"...\n  govRouter.AddRoute(govtypes.RouterKey, govv1beta1.ProposalHandler).\n- AddRoute(paramproposal.RouterKey, params.NewParamChangeProposalHandler(app.ParamsKeeper)).\n- AddRoute(ibcclienttypes.RouterKey, ibcclient.NewClientProposalHandler(app.IBCKeeper.ClientKeeper))\n+ AddRoute(paramproposal.RouterKey, params.NewParamChangeProposalHandler(app.ParamsKeeper))\n"})}),"\n",(0,t.jsx)(r.p,{children:"Update Core IBC Keeper constructor:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"  app.IBCKeeper = ibckeeper.NewKeeper(\n\tappCodec,\n-\tkeys[ibcexported.StoreKey],\n+\truntime.NewKVStoreService(keys[ibcexported.StoreKey]),\n\tapp.GetSubspace(ibcexported.ModuleName),\n-\tapp.StakingKeeper,\n\tapp.UpgradeKeeper,\n-\tscopedIBCKeeper,\n\tauthtypes.NewModuleAddress(govtypes.ModuleName).String(),\n  )\n"})}),"\n",(0,t.jsx)(r.p,{children:"Update IBC Transfer keeper constructor:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"  app.TransferKeeper = ibctransferkeeper.NewKeeper(\n\tappCodec,\n-\tkeys[ibctransfertypes.StoreKey],\n+\truntime.NewKVStoreService(keys[ibctransfertypes.StoreKey]),\n\tapp.GetSubspace(ibctransfertypes.ModuleName),\n\tapp.IBCKeeper.ChannelKeeper,\n\tapp.IBCKeeper.ChannelKeeper,\n-\tapp.IBCKeeper.PortKeeper,\n+\tapp.MsgServiceRouter(),\n\tapp.AccountKeeper,\n\tapp.BankKeeper,\n-\tscopedTransferKeeper,\n\tauthtypes.NewModuleAddress(govtypes.ModuleName).String(),\n  )\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Update ICA Host keeper constructor, notice the removal of the ",(0,t.jsx)(r.code,{children:"WithQueryRouter"})," call in particular:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"  app.ICAHostKeeper = icahostkeeper.NewKeeper(\n\tappCodec,\n-\tkeys[icahosttypes.StoreKey],\n+\truntime.NewKVStoreService(keys[icahosttypes.StoreKey]),\n\tapp.GetSubspace(icahosttypes.SubModuleName),\n-\tapp.IBCFeeKeeper, // use ics29 fee as ics4Wrapper in middleware stack\n\tapp.IBCKeeper.ChannelKeeper,\n-\tapp.IBCKeeper.PortKeeper,\n+\tapp.IBCKeeper.ChannelKeeper,\n\tapp.AccountKeeper,\n-\tscopedICAHostKeeper,\n\tapp.MsgServiceRouter(),\n+\tapp.GRPCQueryRouter(),\n\tauthtypes.NewModuleAddress(govtypes.ModuleName).String(),\n  )\n- app.ICAHostKeeper.WithQueryRouter(app.GRPCQueryRouter())\n"})}),"\n",(0,t.jsx)(r.p,{children:"Remove IBC Fee Module keeper:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"- app.IBCFeeKeeper = ibcfeekeeper.NewKeeper(\n-\tappCodec, keys[ibcfeetypes.StoreKey],\n-\tapp.IBCKeeper.ChannelKeeper, // may be replaced with IBC middleware\n-\tapp.IBCKeeper.ChannelKeeper,\n-\tapp.IBCKeeper.PortKeeper, app.AccountKeeper, app.BankKeeper,\n- )\n"})}),"\n",(0,t.jsx)(r.p,{children:"Update Transfer stack to remove the fee middleware. The example below shows the correct way to wire up a middleware stack with the IBC callbacks middleware:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"  // Create Transfer Stack\n  var transferStack porttypes.IBCModule\n  transferStack = transfer.NewIBCModule(app.TransferKeeper)\n- transferStack = ibccallbacks.NewIBCMiddleware(transferStack, app.IBCFeeKeeper, wasmStackIBCHandler, maxCallbackGas)\n- transferStack = ibcfee.NewIBCMiddleware(transferStack, app.IBCFeeKeeper)\n+ // callbacks wraps the transfer stack as its base app, and uses PacketForwardKeeper as the ICS4Wrapper\n+ // i.e. packet-forward-middleware is higher on the stack and sits between callbacks and the ibc channel keeper\n+ // Since this is the lowest level middleware of the transfer stack, it should be the first entrypoint for transfer keeper's\n+ // WriteAcknowledgement.\n+ cbStack := ibccallbacks.NewIBCMiddleware(transferStack, app.PacketForwardKeeper, wasmStackIBCHandler, maxCallbackGas)\ntransferStack = packetforward.NewIBCMiddleware(\n-\ttransferStack,\n+\tcbStack,\n\tapp.PacketForwardKeeper,\n\t0,\n\tpacketforwardkeeper.DefaultForwardTransferPacketTimeoutTimestamp,\n  )\n+ app.TransferKeeper.WithICS4Wrapper(cbStack)\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Remove ibc fee middleware and any empty IBCModule (often dubbed ",(0,t.jsx)(r.code,{children:"noAuthzModule"}),") from the ICA Controller stack creation:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"- var noAuthzModule porttypes.IBCModule\n- icaControllerStack = icacontroller.NewIBCMiddleware(noAuthzModule, app.ICAControllerKeeper)\n- icaControllerStack = ibcfee.NewIBCMiddleware(icaControllerStack, app.IBCFeeKeeper)\n+ icaControllerStack = icacontroller.NewIBCMiddleware(app.ICAControllerKeeper)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Remove ibc fee middleware from ICA Host stack creation:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"  icaHostStack = icahost.NewIBCModule(app.ICAHostKeeper)\n- icaHostStack = ibcfee.NewIBCMiddleware(icaHostStack, app.IBCFeeKeeper)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Update the module manager creation by removing the capability module, fee module and updating the tendermint app module constructor:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"  app.ModuleManager = module.NewManager(\n    ...\n-   capability.NewAppModule(appCodec, *app.CapabilityKeeper, false),\n    ...\n-   ibcfee.NewAppModule(app.IBCFeeKeeper),\n    ...\n-   ibctm.NewAppModule(),\n+   ibctm.NewAppModule(tmLightClientModule),\n    ...\n  )\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Remove the capability module and ibc fee middleware from ",(0,t.jsx)(r.code,{children:"SetOrderBeginBlockers"}),", ",(0,t.jsx)(r.code,{children:"SetOrderEndBlockers"}),", ",(0,t.jsx)(r.code,{children:"SetOrderInitGenesis"})," and ",(0,t.jsx)(r.code,{children:"SetOrderExportGenesis"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"-   capabilitytypes.ModuleName,\n-   ibcfeetypes.ModuleName,\n"})}),"\n",(0,t.jsxs)(r.p,{children:["If you use 08-wasm, you will need to update the go module that is used for ",(0,t.jsx)(r.code,{children:"QueryPlugins"})," and ",(0,t.jsx)(r.code,{children:"AcceptListStargateQuerier"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:'- wasmLightClientQuerier := ibcwasmtypes.QueryPlugins{\n+ wasmLightClientQuerier := ibcwasmkeeper.QueryPlugins{\n-\tStargate: ibcwasmtypes.AcceptListStargateQuerier([]string{\n+\tStargate: ibcwasmkeeper.AcceptListStargateQuerier([]string{\n\t\t"/ibc.core.client.v1.Query/ClientState",\n\t\t"/ibc.core.client.v1.Query/ConsensusState",\n\t\t"/ibc.core.connection.v1.Query/Connection",\n-\t}),\n+\t}, app.GRPCQueryRouter()),\n  }\n'})}),"\n",(0,t.jsx)(r.p,{children:"If you use 08-wasm, you will need to use the wasm client keeper rather than the go module to initialize pinned codes:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:'- if err := ibcwasmkeeper.InitializePinnedCodes(ctx); err != nil {\n-\tpanic(fmt.Sprintf("ibcwasmkeeper failed initialize pinned codes %s", err))\n+ if err := app.WasmClientKeeper.InitializePinnedCodes(ctx); err != nil {\n+\tpanic(fmt.Sprintf("WasmClientKeeper failed initialize pinned codes %s", err))\n+ }\n'})})]})}function d(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);