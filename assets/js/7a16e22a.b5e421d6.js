"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[48768],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(96540);const i={},c=s.createContext(i);function a(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(c.Provider,{value:n},e.children)}},92834:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>o,toc:()=>h});var s=t(74848),i=t(28453);const c={title:"Active Channels",sidebar_label:"Active Channels",sidebar_position:8,slug:"/apps/interchain-accounts/active-channels"},a="Understanding Active Channels",o={id:"apps/interchain-accounts/active-channels",title:"Active Channels",description:"The Interchain Accounts module uses ORDERED channels to maintain the order of transactions when sending packets from a controller to a host chain. A limitation when using ORDERED channels is that when a packet times out the channel will be closed.",source:"@site/versioned_docs/version-v6.3.x/02-apps/02-interchain-accounts/08-active-channels.md",sourceDirName:"02-apps/02-interchain-accounts",slug:"/apps/interchain-accounts/active-channels",permalink:"/v6/apps/interchain-accounts/active-channels",draft:!1,unlisted:!1,tags:[],version:"v6.3.x",sidebarPosition:8,frontMatter:{title:"Active Channels",sidebar_label:"Active Channels",sidebar_position:8,slug:"/apps/interchain-accounts/active-channels"},sidebar:"defaultSidebar",previous:{title:"Client",permalink:"/v6/apps/interchain-accounts/client"},next:{title:"Authentication Modules",permalink:"/v6/apps/interchain-accounts/legacy/auth-modules"}},r={},h=[{value:"Future improvements",id:"future-improvements",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"understanding-active-channels",children:"Understanding Active Channels"}),"\n",(0,s.jsxs)(n.p,{children:["The Interchain Accounts module uses ",(0,s.jsx)(n.a,{href:"https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#ordering",children:"ORDERED channels"})," to maintain the order of transactions when sending packets from a controller to a host chain. A limitation when using ORDERED channels is that when a packet times out the channel will be closed."]}),"\n",(0,s.jsxs)(n.p,{children:["In the case of a channel closing, a controller chain needs to be able to regain access to the interchain account registered on this channel. ",(0,s.jsx)(n.code,{children:"Active Channels"})," enable this functionality."]}),"\n",(0,s.jsxs)(n.p,{children:["When an Interchain Account is registered using ",(0,s.jsx)(n.code,{children:"MsgRegisterInterchainAccount"}),", a new channel is created on a particular port. During the ",(0,s.jsx)(n.code,{children:"OnChanOpenAck"})," and ",(0,s.jsx)(n.code,{children:"OnChanOpenConfirm"})," steps (on controller & host chain respectively) the ",(0,s.jsx)(n.code,{children:"Active Channel"})," for this interchain account is stored in state."]}),"\n",(0,s.jsxs)(n.p,{children:["It is possible to create a new channel using the same controller chain portID if the previously set ",(0,s.jsx)(n.code,{children:"Active Channel"})," is now in a ",(0,s.jsx)(n.code,{children:"CLOSED"})," state. This channel creation can be initialized programmatically by sending a new ",(0,s.jsx)(n.code,{children:"MsgChannelOpenInit"})," message like so:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"msg := channeltypes.NewMsgChannelOpenInit(portID, string(versionBytes), channeltypes.ORDERED, []string{connectionID}, icatypes.HostPortID, authtypes.NewModuleAddress(icatypes.ModuleName).String())\nhandler := keeper.msgRouter.Handler(msg)\nres, err := handler(ctx, msg)\nif err != nil {\n    return err\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Alternatively, any relayer operator may initiate a new channel handshake for this interchain account once the previously set ",(0,s.jsx)(n.code,{children:"Active Channel"})," is in a ",(0,s.jsx)(n.code,{children:"CLOSED"})," state. This is done by initiating the channel handshake on the controller chain using the same portID associated with the interchain account in question."]}),"\n",(0,s.jsxs)(n.p,{children:["It is important to note that once a channel has been opened for a given interchain account, new channels can not be opened for this account until the currently set ",(0,s.jsx)(n.code,{children:"Active Channel"})," is set to ",(0,s.jsx)(n.code,{children:"CLOSED"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"future-improvements",children:"Future improvements"}),"\n",(0,s.jsxs)(n.p,{children:["Future versions of the ICS-27 protocol and the Interchain Accounts module will likely use a new channel type that provides ordering of packets without the channel closing in the event of a packet timing out, thus removing the need for ",(0,s.jsx)(n.code,{children:"Active Channels"})," entirely.\nThe following is a list of issues which will provide the infrastructure to make this possible:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/cosmos/ibc-go/issues/1599",children:"IBC Channel Upgrades"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/cosmos/ibc-go/issues/1661",children:"Implement ORDERED_ALLOW_TIMEOUT logic in 04-channel"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/cosmos/ibc-go/issues/1662",children:"Add ORDERED_ALLOW_TIMEOUT as supported ordering in 03-connection"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/cosmos/ibc-go/issues/1663",children:"Allow ICA channels to be opened as ORDERED_ALLOW_TIMEOUT"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);