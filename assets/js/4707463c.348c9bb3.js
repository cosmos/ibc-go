"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[85051],{28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>c});var t=s(96540);const r={},i=t.createContext(r);function d(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(i.Provider,{value:n},e.children)}},97499:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var t=s(74848),r=s(28453);const i={title:"Address Codec",sidebar_label:"Address Codec",sidebar_position:7,slug:"/ibc/apps/address-codec"},d="Custom Address Codec",c={id:"ibc/apps/address-codec",title:"Address Codec",description:"Overview",source:"@site/versioned_docs/version-v10.4.x/01-ibc/03-apps/07-address-codec.md",sourceDirName:"01-ibc/03-apps",slug:"/ibc/apps/address-codec",permalink:"/v10/ibc/apps/address-codec",draft:!1,unlisted:!1,tags:[],version:"v10.4.x",sidebarPosition:7,frontMatter:{title:"Address Codec",sidebar_label:"Address Codec",sidebar_position:7,slug:"/ibc/apps/address-codec"},sidebar:"defaultSidebar",previous:{title:"Routing",permalink:"/v10/ibc/apps/routing"},next:{title:"IBC middleware",permalink:"/v10/ibc/middleware/overview"}},o={},a=[{value:"Overview",id:"overview",level:2},{value:"Interface",id:"interface",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Application Wiring",id:"application-wiring",level:3},{value:"Usage",id:"usage",level:2},{value:"Reference Implementation",id:"reference-implementation",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"custom-address-codec",children:"Custom Address Codec"}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["Starting in ibc-go ",(0,t.jsx)(n.code,{children:"v10.4.0"}),", the IBC transfer module uses the application's configured address codec to parse sender and receiver addresses. This enables chains to accept multiple address formats in IBC packets\u2014for example, both standard Cosmos bech32 addresses (",(0,t.jsx)(n.code,{children:"cosmos1..."}),") and Ethereum hex addresses (",(0,t.jsx)(n.code,{children:"0x..."}),")."]}),"\n",(0,t.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,t.jsx)(n.p,{children:"The Cosmos SDK defines a simple interface for converting between address representations:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"type Codec interface {\n  StringToBytes(text string) ([]byte, error)\n  BytesToString(bz []byte) (string, error)\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Applications configure a codec implementation on the ",(0,t.jsx)(n.code,{children:"AccountKeeper"}),". The IBC transfer module retrieves this codec via ",(0,t.jsx)(n.code,{children:"accountKeeper.AddressCodec()"})," and uses it throughout packet processing\u2014validating sender addresses when creating packets and parsing receiver addresses when delivering funds."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Chain independence:"})," Each chain applies its own codec independently. The sending chain validates senders with its codec, the receiving chain validates receivers with its codec. This works seamlessly across chains with different codec configurations without any protocol changes."]}),"\n",(0,t.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsx)(n.p,{children:"A typical implementation composes the SDK's standard bech32 codec and extends it to parse hex addresses:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'type EvmCodec struct {\n\tbech32Codec address.Codec\n}\n\nfunc (c *EvmCodec) StringToBytes(text string) ([]byte, error) {\n\tif strings.HasPrefix(text, "0x") {\n\t\t// Validate and parse hex address using go-ethereum/common\n\t\tif !common.IsHexAddress(text) {\n\t\t\treturn nil, errors.New("invalid hex address")\n\t\t}\n\t\taddr := common.HexToAddress(text)\n\t\treturn addr.Bytes(), nil\n\t}\n\t// Default to bech32 parsing\n\treturn c.bech32Codec.StringToBytes(text)\n}\n\nfunc (c *EvmCodec) BytesToString(bz []byte) (string, error) {\n\t// Always return bech32 format\n\treturn c.bech32Codec.BytesToString(bz)\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"This pattern accepts both address formats as input while consistently outputting bech32. This makes the codec a drop-in replacement for the standard codec\u2014existing tooling continues to work unchanged while users gain the ability to specify hex addresses where convenient."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," A recommended address codec implementation is available in the ",(0,t.jsx)(n.a,{href:"https://github.com/cosmos/evm/blob/main/encoding/address/address_codec.go",children:"cosmos/evm repository"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"application-wiring",children:"Application Wiring"}),"\n",(0,t.jsxs)(n.p,{children:["After initializing your transfer keeper, configure the codec using the ",(0,t.jsx)(n.code,{children:"SetAddressCodec"})," method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"app.TransferKeeper.SetAddressCodec(evmaddress.NewEvmCodec(sdk.GetConfig().GetBech32AccountAddrPrefix()))\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For a complete example showing the transfer keeper initialization and address codec configuration, see ",(0,t.jsx)(n.a,{href:"https://github.com/cosmos/evm/blob/720ba9cf908a20a29b7401b19a136caeb8c4092f/evmd/app.go#L483-L494",children:"evmd app.go"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.p,{children:"Once configured, the chain accepts IBC transfers with receiver addresses in either format:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Standard bech32 address\ngaiad tx ibc-transfer transfer transfer channel-0 \\\ncosmos1p9p6h9m8jcn8f7l6h3k2wq9g6yx0l8a9u2n4lr 1000uatom --from sender\n\n# Ethereum hex address\ngaiad tx ibc-transfer transfer transfer channel-0 \\\n0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb 1000uatom --from sender\n"})}),"\n",(0,t.jsx)(n.p,{children:"Both formats resolve to the same on-chain account when derived from the same private key. The codec handles conversion to the internal byte representation transparently."}),"\n",(0,t.jsx)(n.h2,{id:"reference-implementation",children:"Reference Implementation"}),"\n",(0,t.jsxs)(n.p,{children:["The cosmos/evm repository provides a complete implementation in ",(0,t.jsx)(n.code,{children:"utils/address_codec.go"})," with integration examples in the ",(0,t.jsx)(n.code,{children:"evmd"})," reference chain:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/cosmos/evm/pull/665",children:(0,t.jsx)(n.strong,{children:"Implementation PR"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/cosmos/evm/tree/main/evmd",children:(0,t.jsx)(n.strong,{children:'Reference Chain "evmd"'})})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);