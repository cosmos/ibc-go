"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8815],{14563:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>h});var t=i(74848),r=i(28453);const o={},s="ADR 001: Coin Source Tracing",a={id:"adr-001-coin-source-tracing",title:"ADR 001: Coin Source Tracing",description:"Changelog",source:"@site/architecture/adr-001-coin-source-tracing.md",sourceDirName:".",slug:"/adr-001-coin-source-tracing",permalink:"/architecture/adr-001-coin-source-tracing",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Architecture Decision Records (ADR)",permalink:"/architecture/"},next:{title:"ADR 002: Go module versioning",permalink:"/architecture/adr-002-go-module-versioning"}},c={},h=[{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Context",id:"context",level:2},{value:"Example",id:"example",level:3},{value:"Problem",id:"problem",level:3},{value:"Decision",id:"decision",level:2},{value:"<code>x/ibc-transfer</code> Changes",id:"xibc-transfer-changes",level:3},{value:"Coin Changes",id:"coin-changes",level:3},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"adr-001-coin-source-tracing",children:"ADR 001: Coin Source Tracing"}),"\n",(0,t.jsx)(n.h2,{id:"changelog",children:"Changelog"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"2020-07-09: Initial Draft"}),"\n",(0,t.jsx)(n.li,{children:"2020-08-11: Implementation changes"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"status",children:"Status"}),"\n",(0,t.jsx)(n.p,{children:"Accepted, Implemented"}),"\n",(0,t.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,t.jsxs)(n.p,{children:["The specification for IBC cross-chain fungible token transfers\n(",(0,t.jsx)(n.a,{href:"https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer",children:"ICS20"}),"), needs to\nbe aware of the origin of any token denomination in order to relay a ",(0,t.jsx)(n.code,{children:"Packet"})," which contains the sender\nand recipient addresses in the\n",(0,t.jsx)(n.a,{href:"https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures",children:(0,t.jsx)(n.code,{children:"FungibleTokenPacketData"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The Packet relay sending works based in 2 cases (per\n",(0,t.jsx)(n.a,{href:"https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#packet-relay",children:"specification"})," and ",(0,t.jsx)(n.a,{href:"https://github.com/colin-axner",children:"Colin Axn\xe9r"}),"'s description):"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Sender chain is acting as the source zone. The coins are transferred\nto an escrow address (i.e locked) on the sender chain and then transferred\nto the receiving chain through IBC TAO logic. It is expected that the\nreceiving chain will mint vouchers to the receiving address."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Sender chain is acting as the sink zone. The coins (vouchers) are burned\non the sender chain and then transferred to the receiving chain through IBC\nTAO logic. It is expected that the receiving chain, which had previously\nsent the original denomination, will unescrow the fungible token and send\nit to the receiving address."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Another way of thinking of source and sink zones is through the token's\ntimeline. Each send to any chain other than the one it was previously\nreceived from is a movement forwards in the token's timeline. This causes\ntrace to be added to the token's history and the destination port and\ndestination channel to be prefixed to the denomination. In these instances\nthe sender chain is acting as the source zone. When the token is sent back\nto the chain it previously received from, the prefix is removed. This is\na backwards movement in the token's timeline and the sender chain\nis acting as the sink zone."}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(n.p,{children:["Assume the following channel connections exist and that all channels use the port ID ",(0,t.jsx)(n.code,{children:"transfer"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["chain ",(0,t.jsx)(n.code,{children:"A"})," has channels with chain ",(0,t.jsx)(n.code,{children:"B"})," and chain ",(0,t.jsx)(n.code,{children:"C"})," with the IDs ",(0,t.jsx)(n.code,{children:"channelToB"})," and ",(0,t.jsx)(n.code,{children:"channelToC"}),", respectively"]}),"\n",(0,t.jsxs)(n.li,{children:["chain ",(0,t.jsx)(n.code,{children:"B"})," has channels with chain ",(0,t.jsx)(n.code,{children:"A"})," and chain ",(0,t.jsx)(n.code,{children:"C"})," with the IDs ",(0,t.jsx)(n.code,{children:"channelToA"})," and ",(0,t.jsx)(n.code,{children:"channelToC"}),", respectively"]}),"\n",(0,t.jsxs)(n.li,{children:["chain ",(0,t.jsx)(n.code,{children:"C"})," has channels with chain ",(0,t.jsx)(n.code,{children:"A"})," and chain ",(0,t.jsx)(n.code,{children:"B"})," with the IDs ",(0,t.jsx)(n.code,{children:"channelToA"})," and ",(0,t.jsx)(n.code,{children:"channelToB"}),", respectively"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["These steps of transfer between chains occur in the following order: ",(0,t.jsx)(n.code,{children:"A -> B -> C -> A -> C"}),". In particular:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"A -> B"}),": sender chain is source zone. ",(0,t.jsx)(n.code,{children:"A"})," sends packet with ",(0,t.jsx)(n.code,{children:"denom"})," (escrowed on ",(0,t.jsx)(n.code,{children:"A"}),"), ",(0,t.jsx)(n.code,{children:"B"})," receives ",(0,t.jsx)(n.code,{children:"denom"})," and mints and sends voucher ",(0,t.jsx)(n.code,{children:"transfer/channelToA/denom"})," to recipient."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"B -> C"}),": sender chain is source zone. ",(0,t.jsx)(n.code,{children:"B"})," sends packet with ",(0,t.jsx)(n.code,{children:"transfer/channelToA/denom"})," (escrowed on ",(0,t.jsx)(n.code,{children:"B"}),"), ",(0,t.jsx)(n.code,{children:"C"})," receives ",(0,t.jsx)(n.code,{children:"transfer/channelToA/denom"})," and mints and sends voucher ",(0,t.jsx)(n.code,{children:"transfer/channelToB/transfer/channelToA/denom"})," to recipient."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"C -> A"}),": sender chain is source zone. ",(0,t.jsx)(n.code,{children:"C"})," sends packet with ",(0,t.jsx)(n.code,{children:"transfer/channelToB/transfer/channelToA/denom"})," (escrowed on ",(0,t.jsx)(n.code,{children:"C"}),"), ",(0,t.jsx)(n.code,{children:"A"})," receives ",(0,t.jsx)(n.code,{children:"transfer/channelToB/transfer/channelToA/denom"})," and mints and sends voucher ",(0,t.jsx)(n.code,{children:"transfer/channelToC/transfer/channelToB/transfer/channelToA/denom"})," to recipient."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"A -> C"}),": sender chain is sink zone. ",(0,t.jsx)(n.code,{children:"A"})," sends packet with ",(0,t.jsx)(n.code,{children:"transfer/channelToC/transfer/channelToB/transfer/channelToA/denom"})," (burned on ",(0,t.jsx)(n.code,{children:"A"}),"), ",(0,t.jsx)(n.code,{children:"C"})," receives ",(0,t.jsx)(n.code,{children:"transfer/channelToC/transfer/channelToB/transfer/channelToA/denom"}),", and unescrows and sends ",(0,t.jsx)(n.code,{children:"transfer/channelToB/transfer/channelToA/denom"})," to recipient."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The token has a final denomination on chain ",(0,t.jsx)(n.code,{children:"C"})," of ",(0,t.jsx)(n.code,{children:"transfer/channelToB/transfer/channelToA/denom"}),", where ",(0,t.jsx)(n.code,{children:"transfer/channelToB/transfer/channelToA"})," is the trace information."]}),"\n",(0,t.jsx)(n.p,{children:"In this context, upon a receive of a cross-chain fungible token transfer, if the sender chain is the source of the token, the protocol prefixes the denomination with the port and channel identifiers in the following format:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"prefix + denom = {destPortN}/{destChannelN}/.../{destPort0}/{destChannel0}/denom\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Example: transferring ",(0,t.jsx)(n.code,{children:"100 uatom"})," from port ",(0,t.jsx)(n.code,{children:"HubPort"})," and channel ",(0,t.jsx)(n.code,{children:"HubChannel"})," on the Hub to\nEthermint's port ",(0,t.jsx)(n.code,{children:"EthermintPort"})," and channel ",(0,t.jsx)(n.code,{children:"EthermintChannel"})," results in ",(0,t.jsx)(n.code,{children:"100 EthermintPort/EthermintChannel/uatom"}),", where ",(0,t.jsx)(n.code,{children:"EthermintPort/EthermintChannel/uatom"})," is the new\ndenomination on the receiving chain."]}),"\n",(0,t.jsxs)(n.p,{children:["In the case those tokens are transferred back to the Hub (i.e the ",(0,t.jsx)(n.strong,{children:"source"})," chain), the prefix is\ntrimmed and the token denomination updated to the original one."]}),"\n",(0,t.jsx)(n.h3,{id:"problem",children:"Problem"}),"\n",(0,t.jsx)(n.p,{children:"The problem of adding additional information to the coin denomination is twofold:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The ever increasing length if tokens are transferred to zones other than the source:"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["If a token is transferred ",(0,t.jsx)(n.code,{children:"n"})," times via IBC to a sink chain, the token denom will contain ",(0,t.jsx)(n.code,{children:"n"})," pairs\nof prefixes, as shown on the format example above. This poses a problem because, while port and\nchannel identifiers have a maximum length of 64 each, the SDK ",(0,t.jsx)(n.code,{children:"Coin"})," type only accepts denoms up to\n64 characters. Thus, a single cross-chain token, which again, is composed by the port and channels\nidentifiers plus the base denomination, can exceed the length validation for the SDK ",(0,t.jsx)(n.code,{children:"Coins"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This can result in undesired behaviours such as tokens not being able to be transferred to multiple\nsink chains if the denomination exceeds the length or unexpected ",(0,t.jsx)(n.code,{children:"panics"})," due to denomination\nvalidation failing on the receiving chain."]}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"The existence of special characters and uppercase letters on the denomination:"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["In the SDK every time a ",(0,t.jsx)(n.code,{children:"Coin"})," is initialized through the constructor function ",(0,t.jsx)(n.code,{children:"NewCoin"}),", a validation\nof a coin's denom is performed according to a\n",(0,t.jsx)(n.a,{href:"https://github.com/cosmos/cosmos-sdk/blob/a940214a4923a3bf9a9161cd14bd3072299cd0c9/types/coin.go#L583",children:"Regex"}),",\nwhere only lowercase alphanumeric characters are accepted. While this is desirable for native denominations\nto keep a clean UX, it presents a challenge for IBC as ports and channels might be randomly\ngenerated with special and uppercase characters as per the ",(0,t.jsx)(n.a,{href:"https://github.com/cosmos/ibc/tree/master/spec/core/ics-024-host-requirements#paths-identifiers-separators",children:"ICS 024 - Host\nRequirements"}),"\nspecification."]}),"\n",(0,t.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,t.jsx)(n.p,{children:"The issues outlined above, are applicable only to SDK-based chains, and thus the proposed solution\nare do not require specification changes that would result in modification to other implementations\nof the ICS20 spec."}),"\n",(0,t.jsx)(n.p,{children:"Instead of adding the identifiers on the coin denomination directly, the proposed solution hashes\nthe denomination prefix in order to get a consistent length for all the cross-chain fungible tokens."}),"\n",(0,t.jsx)(n.p,{children:"This will be used for internal storage only, and when transferred via IBC to a different chain, the\ndenomination specified on the packed data will be the full prefix path of the identifiers needed to\ntrace the token back to the originating chain, as specified on ICS20."}),"\n",(0,t.jsx)(n.p,{children:"The new proposed format will be the following:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'ibcDenom = "ibc/" + hash(trace path + "/" + base denom)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The hash function will be a SHA256 hash of the fields of the ",(0,t.jsx)(n.code,{children:"DenomTrace"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:"// DenomTrace contains the base denomination for ICS20 fungible tokens and the source tracing\n// information\nmessage DenomTrace {\n  // chain of port/channel identifiers used for tracing the source of the fungible token\n  string path = 1;\n  // base denomination of the relayed fungible token\n  string base_denom = 2;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"IBCDenom"})," function constructs the ",(0,t.jsx)(n.code,{children:"Coin"})," denomination used when creating the ICS20 fungible token packet data:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'// Hash returns the hex bytes of the SHA256 hash of the DenomTrace fields using the following formula:\n//\n// hash = sha256(tracePath + "/" + baseDenom)\nfunc (dt DenomTrace) Hash() tmbytes.HexBytes {\n  return tmhash.Sum(dt.Path + "/" + dt.BaseDenom)\n}\n\n// IBCDenom a coin denomination for an ICS20 fungible token in the format \'ibc/{hash(tracePath + baseDenom)}\'. \n// If the trace is empty, it will return the base denomination.\nfunc (dt DenomTrace) IBCDenom() string {\n  if dt.Path != "" {\n    return fmt.Sprintf("ibc/%s", dt.Hash())\n  }\n  return dt.BaseDenom\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"xibc-transfer-changes",children:[(0,t.jsx)(n.code,{children:"x/ibc-transfer"})," Changes"]}),"\n",(0,t.jsxs)(n.p,{children:["In order to retrieve the trace information from an IBC denomination, a lookup table needs to be\nadded to the ",(0,t.jsx)(n.code,{children:"ibc-transfer"})," module. These values need to also be persisted between upgrades, meaning\nthat a new ",(0,t.jsx)(n.code,{children:"[]DenomTrace"})," ",(0,t.jsx)(n.code,{children:"GenesisState"})," field state needs to be added to the module:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"// GetDenomTrace retrieves the full identifiers trace and base denomination from the store.\nfunc (k Keeper) GetDenomTrace(ctx Context, denomTraceHash []byte) (DenomTrace, bool) {\n  store := ctx.KVStore(k.storeKey)\n  bz := store.Get(types.KeyDenomTrace(traceHash))\n  if bz == nil {\n    return &DenomTrace, false\n  }\n\n  var denomTrace DenomTrace\n  k.cdc.MustUnmarshalBinaryBare(bz, &denomTrace)\n  return denomTrace, true\n}\n\n// HasDenomTrace checks if a the key with the given trace hash exists on the store.\nfunc (k Keeper) HasDenomTrace(ctx Context, denomTraceHash []byte)  bool {\n  store := ctx.KVStore(k.storeKey)\n  return store.Has(types.KeyTrace(denomTraceHash))\n}\n\n// SetDenomTrace sets a new {trace hash -> trace} pair to the store.\nfunc (k Keeper) SetDenomTrace(ctx Context, denomTrace DenomTrace) {\n  store := ctx.KVStore(k.storeKey)\n  bz := k.cdc.MustMarshalBinaryBare(&denomTrace)\n  store.Set(types.KeyTrace(denomTrace.Hash()), bz)\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"MsgTransfer"})," will validate that the ",(0,t.jsx)(n.code,{children:"Coin"})," denomination from the ",(0,t.jsx)(n.code,{children:"Token"})," field contains a valid\nhash, if the trace info is provided, or that the base denominations matches:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"func (msg MsgTransfer) ValidateBasic() error {\n  // ...\n  return ValidateIBCDenom(msg.Token.Denom)\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'// ValidateIBCDenom validates that the given denomination is either:\n//\n//  - A valid base denomination (eg: \'uatom\')\n//  - A valid fungible token representation (i.e \'ibc/{hash}\') per ADR 001 https://github.com/cosmos/ibc-go/blob/main/docs/architecture/adr-001-coin-source-tracing.md\nfunc ValidateIBCDenom(denom string) error {\n  denomSplit := strings.SplitN(denom, "/", 2)\n\n  switch {\n  case strings.TrimSpace(denom) == "",\n    len(denomSplit) == 1 && denomSplit[0] == "ibc",\n    len(denomSplit) == 2 && (denomSplit[0] != "ibc" || strings.TrimSpace(denomSplit[1]) == ""):\n    return sdkerrors.Wrapf(ErrInvalidDenomForTransfer, "denomination should be prefixed with the format \'ibc/{hash(trace + \\"/\\" + %s)}\'", denom)\n\n  case denomSplit[0] == denom && strings.TrimSpace(denom) != "":\n    return sdk.ValidateDenom(denom)\n  }\n\n  if _, err := ParseHexHash(denomSplit[1]); err != nil {\n    return Wrapf(err, "invalid denom trace hash %s", denomSplit[1])\n  }\n\n  return nil\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"The denomination trace info only needs to be updated when token is received:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Receiver is ",(0,t.jsx)(n.strong,{children:"source"})," chain: The receiver created the token and must have the trace lookup already stored (if necessary ",(0,t.jsx)(n.em,{children:"ie"})," native token case wouldn't need a lookup)."]}),"\n",(0,t.jsxs)(n.li,{children:["Receiver is ",(0,t.jsx)(n.strong,{children:"not source"})," chain: Store the received info. For example, during step 1, when chain ",(0,t.jsx)(n.code,{children:"B"})," receives ",(0,t.jsx)(n.code,{children:"transfer/channelToA/denom"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'// SendTransfer\n// ...\n\n  fullDenomPath := token.Denom\n\n// deconstruct the token denomination into the denomination trace info\n// to determine if the sender is the source chain\nif strings.HasPrefix(token.Denom, "ibc/") {\n  fullDenomPath, err = k.DenomPathFromHash(ctx, token.Denom)\n  if err != nil {\n    return err\n  }\n}\n\nif types.SenderChainIsSource(sourcePort, sourceChannel, fullDenomPath) {\n//...\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'// DenomPathFromHash returns the full denomination path prefix from an ibc denom with a hash\n// component.\nfunc (k Keeper) DenomPathFromHash(ctx sdk.Context, denom string) (string, error) {\n  hexHash := denom[4:]\n  hash, err := ParseHexHash(hexHash)\n  if err != nil {\n    return "", Wrap(ErrInvalidDenomForTransfer, err.Error())\n  }\n\n  denomTrace, found := k.GetDenomTrace(ctx, hash)\n  if !found {\n    return "", Wrap(ErrTraceNotFound, hexHash)\n  }\n\n  fullDenomPath := denomTrace.GetFullDenomPath()\n  return fullDenomPath, nil\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'// OnRecvPacket\n// ...\n\n// This is the prefix that would have been prefixed to the denomination\n// on sender chain IF and only if the token originally came from the\n// receiving chain.\n//\n// NOTE: We use SourcePort and SourceChannel here, because the counterparty\n// chain would have prefixed with DestPort and DestChannel when originally\n// receiving this coin as seen in the "sender chain is the source" condition.\nif ReceiverChainIsSource(packet.GetSourcePort(), packet.GetSourceChannel(), data.Denom) {\n  // sender chain is not the source, unescrow tokens\n\n  // remove prefix added by sender chain\n  voucherPrefix := types.GetDenomPrefix(packet.GetSourcePort(), packet.GetSourceChannel())\n  unprefixedDenom := data.Denom[len(voucherPrefix):]\n  token := sdk.NewCoin(unprefixedDenom, sdk.NewIntFromUint64(data.Amount))\n\n  // unescrow tokens\n  escrowAddress := types.GetEscrowAddress(packet.GetDestPort(), packet.GetDestChannel())\n  return k.bankKeeper.SendCoins(ctx, escrowAddress, receiver, sdk.NewCoins(token))\n}\n\n// sender chain is the source, mint vouchers\n\n// since SendPacket did not prefix the denomination, we must prefix denomination here\nsourcePrefix := types.GetDenomPrefix(packet.GetDestPort(), packet.GetDestChannel())\n// NOTE: sourcePrefix contains the trailing "/"\nprefixedDenom := sourcePrefix + data.Denom\n\n// construct the denomination trace from the full raw denomination\ndenomTrace := types.ParseDenomTrace(prefixedDenom)\n\n// set the value to the lookup table if not stored already\ntraceHash := denomTrace.Hash()\nif !k.HasDenomTrace(ctx, traceHash) {\n  k.SetDenomTrace(ctx, traceHash, denomTrace)\n}\n\nvoucherDenom := denomTrace.IBCDenom()\nvoucher := sdk.NewCoin(voucherDenom, sdk.NewIntFromUint64(data.Amount))\n\n// mint new tokens if the source of the transfer is the same chain\nif err := k.bankKeeper.MintCoins(\n  ctx, types.ModuleName, sdk.NewCoins(voucher),\n); err != nil {\n  return err\n}\n\n// send to receiver\nreturn k.bankKeeper.SendCoinsFromModuleToAccount(\n  ctx, types.ModuleName, receiver, sdk.NewCoins(voucher),\n)\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func NewDenomTraceFromRawDenom(denom string) DenomTrace{\n  denomSplit := strings.Split(denom, "/")\n  trace := ""\n  if len(denomSplit) > 1 {\n    trace = strings.Join(denomSplit[:len(denomSplit)-1], "/")\n  }\n  return DenomTrace{\n    BaseDenom: denomSplit[len(denomSplit)-1],\n    Trace:     trace,\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["One final remark is that the ",(0,t.jsx)(n.code,{children:"FungibleTokenPacketData"})," will remain the same, i.e with the prefixed full denomination, since the receiving chain may not be an SDK-based chain."]}),"\n",(0,t.jsx)(n.h3,{id:"coin-changes",children:"Coin Changes"}),"\n",(0,t.jsx)(n.p,{children:"The coin denomination validation will need to be updated to reflect these changes. In particular, the denomination validation\nfunction will now:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Accept slash separators (",(0,t.jsx)(n.code,{children:'"/"'}),") and uppercase characters (due to the ",(0,t.jsx)(n.code,{children:"HexBytes"})," format)"]}),"\n",(0,t.jsxs)(n.li,{children:["Bump the maximum character length to 128, as the hex representation used by Tendermint's\n",(0,t.jsx)(n.code,{children:"HexBytes"})," type contains 64 characters."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Additional validation logic, such as verifying the length of the hash, the  may be added to the bank module in the future if the ",(0,t.jsx)(n.a,{href:"https://github.com/cosmos/cosmos-sdk/pull/6755",children:"custom base denomination validation"})," is integrated into the SDK."]}),"\n",(0,t.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Clearer separation of the source tracing behaviour of the token (transfer prefix) from the original\n",(0,t.jsx)(n.code,{children:"Coin"})," denomination"]}),"\n",(0,t.jsxs)(n.li,{children:["Consistent validation of ",(0,t.jsx)(n.code,{children:"Coin"})," fields (i.e no special characters, fixed max length)"]}),"\n",(0,t.jsxs)(n.li,{children:["Cleaner ",(0,t.jsx)(n.code,{children:"Coin"})," and standard denominations for IBC"]}),"\n",(0,t.jsxs)(n.li,{children:["No additional fields to SDK ",(0,t.jsx)(n.code,{children:"Coin"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Store each set of tracing denomination identifiers on the ",(0,t.jsx)(n.code,{children:"ibc-transfer"})," module store"]}),"\n",(0,t.jsx)(n.li,{children:"Clients will have to fetch the base denomination every time they receive a new relayed fungible token over IBC. This can be mitigated using a map/cache for already seen hashes on the client side. Other forms of mitigation, would be opening a websocket connection subscribe to incoming events."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Slight difference with the ICS20 spec"}),"\n",(0,t.jsxs)(n.li,{children:["Additional validation logic for IBC coins on the ",(0,t.jsx)(n.code,{children:"ibc-transfer"})," module"]}),"\n",(0,t.jsx)(n.li,{children:"Additional genesis fields"}),"\n",(0,t.jsx)(n.li,{children:"Slightly increases the gas usage on cross-chain transfers due to access to the store. This should\nbe inter-block cached if transfers are frequent."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer",children:"ICS 20 - Fungible token transfer"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/cosmos/cosmos-sdk/pull/6755",children:"Custom Coin Denomination validation"})}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(96540);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);