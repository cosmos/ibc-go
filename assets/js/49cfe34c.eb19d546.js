"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[62470],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var o=t(96540);const s={},a=o.createContext(s);function r(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(a.Provider,{value:n},e.children)}},37458:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var o=t(74848),s=t(28453);const a={title:"IBC v2 Transfer",sidebar_label:"IBC v2 Transfer",sidebar_position:10,slug:"/apps/transfer/ics20-v1/ibcv2transfer"},r="IBC v2 Transfer",i={id:"apps/transfer/IBCv2-transfer",title:"IBC v2 Transfer",description:"Much of the core business logic of sending and receiving tokens between chains is unchanged between IBC Classic and IBC v2. Some of the key differences to pay attention to are detailed below.",source:"@site/versioned_docs/version-v10.4.x/02-apps/01-transfer/10-IBCv2-transfer.md",sourceDirName:"02-apps/01-transfer",slug:"/apps/transfer/ics20-v1/ibcv2transfer",permalink:"/v10/apps/transfer/ics20-v1/ibcv2transfer",draft:!1,unlisted:!1,tags:[],version:"v10.4.x",sidebarPosition:10,frontMatter:{title:"IBC v2 Transfer",sidebar_label:"IBC v2 Transfer",sidebar_position:10,slug:"/apps/transfer/ics20-v1/ibcv2transfer"},sidebar:"defaultSidebar",previous:{title:"Client",permalink:"/v10/apps/transfer/ics20-v1/client"},next:{title:"Overview",permalink:"/v10/apps/interchain-accounts/overview"}},c={},d=[{value:"No Channel Handshakes, New Packet Format and Encoding Support",id:"no-channel-handshakes-new-packet-format-and-encoding-support",level:2},{value:"Base Denoms cannot contain slashes",id:"base-denoms-cannot-contain-slashes",level:2},{value:"Changes to the application module interface",id:"changes-to-the-application-module-interface",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"ibc-v2-transfer",children:"IBC v2 Transfer"}),"\n",(0,o.jsx)(n.p,{children:"Much of the core business logic of sending and receiving tokens between chains is unchanged between IBC Classic and IBC v2. Some of the key differences to pay attention to are detailed below."}),"\n",(0,o.jsx)(n.h2,{id:"no-channel-handshakes-new-packet-format-and-encoding-support",children:"No Channel Handshakes, New Packet Format and Encoding Support"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["IBC v2 does not establish connection between applications with a channel handshake. Channel identifiers represent Client IDs and are included in the ",(0,o.jsx)(n.code,{children:"Payload"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The source and destination port must be ",(0,o.jsx)(n.code,{children:'"transfer"'})]}),"\n",(0,o.jsxs)(n.li,{children:["The channel IDs ",(0,o.jsx)(n.a,{href:"https://github.com/cosmos/ibc-go/blob/main/modules/apps/transfer/v2/ibc_module.go#L46-L47",children:"must be valid client IDs"})," of the format ",(0,o.jsx)(n.code,{children:"{clientID}-{sequence}"}),", e.g. 08-wasm-007"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.a,{href:"https://github.com/cosmos/ibc-go/blob/main/modules/core/04-channel/v2/types/packet.pb.go#L146-L158",children:(0,o.jsx)(n.code,{children:"Payload"})})," contains the ",(0,o.jsx)(n.a,{href:"https://github.com/cosmos/ibc-go/blob/main/modules/apps/transfer/types/packet.pb.go#L28-L39",children:(0,o.jsx)(n.code,{children:"FungibleTokenPacketData"})})," for a token transfer."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The code snippet shows the ",(0,o.jsx)(n.code,{children:"Payload"})," struct."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'// Payload contains the source and destination ports and payload for the application (version, encoding, raw bytes)\ntype Payload struct {\n\t// specifies the source port of the packet, e.g. transfer\n\tSourcePort string `protobuf:"bytes,1,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`\n\t// specifies the destination port of the packet, e.g. transfer\n\tDestinationPort string `protobuf:"bytes,2,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`\n\t// version of the specified application\n\tVersion string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`\n\t// the encoding used for the provided value, for transfer this could be JSON, protobuf or ABI\n\tEncoding string `protobuf:"bytes,4,opt,name=encoding,proto3" json:"encoding,omitempty"`\n\t// the raw bytes for the payload.\n\tValue []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The code snippet shows the structure of the ",(0,o.jsx)(n.code,{children:"Payload"})," bytes for token transfer"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'// FungibleTokenPacketData defines a struct for the packet payload\n// See FungibleTokenPacketData spec:\n// https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures\ntype FungibleTokenPacketData struct {\n\t// the token denomination to be transferred\n\tDenom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`\n\t// the token amount to be transferred\n\tAmount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`\n\t// the sender address\n\tSender string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`\n\t// the recipient address on the destination chain\n\tReceiver string `protobuf:"bytes,4,opt,name=receiver,proto3" json:"receiver,omitempty"`\n\t// optional memo\n\tMemo string `protobuf:"bytes,5,opt,name=memo,proto3" json:"memo,omitempty"`\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"base-denoms-cannot-contain-slashes",children:"Base Denoms cannot contain slashes"}),"\n",(0,o.jsxs)(n.p,{children:["With the new ",(0,o.jsx)(n.a,{href:"https://github.com/cosmos/ibc-go/blob/main/modules/apps/transfer/types/token.pb.go#L81-L87",children:(0,o.jsx)(n.code,{children:"Denom"})})," struct, the base denom, i.e. uatom, is separated from the trace - the path the token has travelled. The trace is presented as an array of ",(0,o.jsx)(n.a,{href:"https://github.com/cosmos/ibc-go/blob/main/modules/apps/transfer/types/token.pb.go#L136-L140",children:(0,o.jsx)(n.code,{children:"Hop"})}),"s."]}),"\n",(0,o.jsx)(n.p,{children:'Because IBC v2 no longer uses channels, it is no longer possible to rely on a fixed format for an identifier so using a base denom that contains a "/" is disallowed.'}),"\n",(0,o.jsx)(n.h2,{id:"changes-to-the-application-module-interface",children:"Changes to the application module interface"}),"\n",(0,o.jsxs)(n.p,{children:["Instead of implementing token transfer for ",(0,o.jsx)(n.code,{children:"port.IBCModule"}),", IBC v2 uses the new application interface ",(0,o.jsx)(n.code,{children:"api.IBCModule"}),". More information on the interface differences can be found in the ",(0,o.jsx)(n.a,{href:"/v10/ibc/apps/ibcv2apps",children:"application section"}),"."]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);