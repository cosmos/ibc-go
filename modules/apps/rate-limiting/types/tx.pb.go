// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/rate_limiting/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Gov tx to add a new rate limit
type MsgAddRateLimit struct {
	// signer defines the x/gov module account address or other authority signing the message
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// Denom for the rate limit, as it appears on the rate limited chain
	// When rate limiting a non-native token, this will be an ibc denom
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// ChannelId for the rate limit, on the side of the rate limited chain
	ChannelOrClientId string `protobuf:"bytes,3,opt,name=channel_or_client_id,json=channelOrClientId,proto3" json:"channel_or_client_id,omitempty"`
	// MaxPercentSend defines the threshold for outflows
	// The threshold is defined as a percentage (e.g. 10 indicates 10%)
	MaxPercentSend cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=max_percent_send,json=maxPercentSend,proto3,customtype=cosmossdk.io/math.Int" json:"max_percent_send"`
	// MaxPercentSend defines the threshold for inflows
	// The threshold is defined as a percentage (e.g. 10 indicates 10%)
	MaxPercentRecv cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=max_percent_recv,json=maxPercentRecv,proto3,customtype=cosmossdk.io/math.Int" json:"max_percent_recv"`
	// DurationHours specifies the number of hours before the rate limit
	// is reset (e.g. 24 indicates that the rate limit is reset each day)
	DurationHours uint64 `protobuf:"varint,6,opt,name=duration_hours,json=durationHours,proto3" json:"duration_hours,omitempty"`
}

func (m *MsgAddRateLimit) Reset()         { *m = MsgAddRateLimit{} }
func (m *MsgAddRateLimit) String() string { return proto.CompactTextString(m) }
func (*MsgAddRateLimit) ProtoMessage()    {}
func (*MsgAddRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bbfc0abda512109, []int{0}
}
func (m *MsgAddRateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRateLimit.Merge(m, src)
}
func (m *MsgAddRateLimit) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRateLimit proto.InternalMessageInfo

func (m *MsgAddRateLimit) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgAddRateLimit) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgAddRateLimit) GetChannelOrClientId() string {
	if m != nil {
		return m.ChannelOrClientId
	}
	return ""
}

func (m *MsgAddRateLimit) GetDurationHours() uint64 {
	if m != nil {
		return m.DurationHours
	}
	return 0
}

// MsgAddRateLimitResponse is the return type for AddRateLimit function.
type MsgAddRateLimitResponse struct {
}

func (m *MsgAddRateLimitResponse) Reset()         { *m = MsgAddRateLimitResponse{} }
func (m *MsgAddRateLimitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddRateLimitResponse) ProtoMessage()    {}
func (*MsgAddRateLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bbfc0abda512109, []int{1}
}
func (m *MsgAddRateLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRateLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRateLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRateLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRateLimitResponse.Merge(m, src)
}
func (m *MsgAddRateLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRateLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRateLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRateLimitResponse proto.InternalMessageInfo

// Gov tx to update an existing rate limit
type MsgUpdateRateLimit struct {
	// signer defines the x/gov module account address or other authority signing the message
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// Denom for the rate limit, as it appears on the rate limited chain
	// When rate limiting a non-native token, this will be an ibc denom
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// ChannelId for the rate limit, on the side of the rate limited chain
	ChannelOrClientId string `protobuf:"bytes,3,opt,name=channel_or_client_id,json=channelOrClientId,proto3" json:"channel_or_client_id,omitempty"`
	// MaxPercentSend defines the threshold for outflows
	// The threshold is defined as a percentage (e.g. 10 indicates 10%)
	MaxPercentSend cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=max_percent_send,json=maxPercentSend,proto3,customtype=cosmossdk.io/math.Int" json:"max_percent_send"`
	// MaxPercentSend defines the threshold for inflows
	// The threshold is defined as a percentage (e.g. 10 indicates 10%)
	MaxPercentRecv cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=max_percent_recv,json=maxPercentRecv,proto3,customtype=cosmossdk.io/math.Int" json:"max_percent_recv"`
	// DurationHours specifies the number of hours before the rate limit
	// is reset (e.g. 24 indicates that the rate limit is reset each day)
	DurationHours uint64 `protobuf:"varint,6,opt,name=duration_hours,json=durationHours,proto3" json:"duration_hours,omitempty"`
}

func (m *MsgUpdateRateLimit) Reset()         { *m = MsgUpdateRateLimit{} }
func (m *MsgUpdateRateLimit) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRateLimit) ProtoMessage()    {}
func (*MsgUpdateRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bbfc0abda512109, []int{2}
}
func (m *MsgUpdateRateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRateLimit.Merge(m, src)
}
func (m *MsgUpdateRateLimit) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRateLimit proto.InternalMessageInfo

func (m *MsgUpdateRateLimit) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateRateLimit) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgUpdateRateLimit) GetChannelOrClientId() string {
	if m != nil {
		return m.ChannelOrClientId
	}
	return ""
}

func (m *MsgUpdateRateLimit) GetDurationHours() uint64 {
	if m != nil {
		return m.DurationHours
	}
	return 0
}

// MsgUpdateRateLimitResponse is the return type for UpdateRateLimit.
type MsgUpdateRateLimitResponse struct {
}

func (m *MsgUpdateRateLimitResponse) Reset()         { *m = MsgUpdateRateLimitResponse{} }
func (m *MsgUpdateRateLimitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRateLimitResponse) ProtoMessage()    {}
func (*MsgUpdateRateLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bbfc0abda512109, []int{3}
}
func (m *MsgUpdateRateLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRateLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRateLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRateLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRateLimitResponse.Merge(m, src)
}
func (m *MsgUpdateRateLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRateLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRateLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRateLimitResponse proto.InternalMessageInfo

// Gov tx to remove a rate limit
type MsgRemoveRateLimit struct {
	// signer defines the x/gov module account address or other authority signing the message
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// Denom for the rate limit, as it appears on the rate limited chain
	// When rate limiting a non-native token, this will be an ibc denom
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// ChannelId for the rate limit, on the side of the rate limited chain
	ChannelOrClientId string `protobuf:"bytes,3,opt,name=channel_or_client_id,json=channelOrClientId,proto3" json:"channel_or_client_id,omitempty"`
}

func (m *MsgRemoveRateLimit) Reset()         { *m = MsgRemoveRateLimit{} }
func (m *MsgRemoveRateLimit) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveRateLimit) ProtoMessage()    {}
func (*MsgRemoveRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bbfc0abda512109, []int{4}
}
func (m *MsgRemoveRateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveRateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveRateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveRateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveRateLimit.Merge(m, src)
}
func (m *MsgRemoveRateLimit) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveRateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveRateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveRateLimit proto.InternalMessageInfo

func (m *MsgRemoveRateLimit) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRemoveRateLimit) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgRemoveRateLimit) GetChannelOrClientId() string {
	if m != nil {
		return m.ChannelOrClientId
	}
	return ""
}

// MsgRemoveRateLimitResponse is the response type for RemoveRateLimit
type MsgRemoveRateLimitResponse struct {
}

func (m *MsgRemoveRateLimitResponse) Reset()         { *m = MsgRemoveRateLimitResponse{} }
func (m *MsgRemoveRateLimitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveRateLimitResponse) ProtoMessage()    {}
func (*MsgRemoveRateLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bbfc0abda512109, []int{5}
}
func (m *MsgRemoveRateLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveRateLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveRateLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveRateLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveRateLimitResponse.Merge(m, src)
}
func (m *MsgRemoveRateLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveRateLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveRateLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveRateLimitResponse proto.InternalMessageInfo

// Gov tx to reset the flow on a rate limit
type MsgResetRateLimit struct {
	// signer defines the x/gov module account address or other authority signing the message
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// Denom for the rate limit, as it appears on the rate limited chain
	// When rate limiting a non-native token, this will be an ibc denom
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// ChannelId for the rate limit, on the side of the rate limited chain
	ChannelOrClientId string `protobuf:"bytes,3,opt,name=channel_or_client_id,json=channelOrClientId,proto3" json:"channel_or_client_id,omitempty"`
}

func (m *MsgResetRateLimit) Reset()         { *m = MsgResetRateLimit{} }
func (m *MsgResetRateLimit) String() string { return proto.CompactTextString(m) }
func (*MsgResetRateLimit) ProtoMessage()    {}
func (*MsgResetRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bbfc0abda512109, []int{6}
}
func (m *MsgResetRateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgResetRateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgResetRateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgResetRateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgResetRateLimit.Merge(m, src)
}
func (m *MsgResetRateLimit) XXX_Size() int {
	return m.Size()
}
func (m *MsgResetRateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgResetRateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgResetRateLimit proto.InternalMessageInfo

func (m *MsgResetRateLimit) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgResetRateLimit) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgResetRateLimit) GetChannelOrClientId() string {
	if m != nil {
		return m.ChannelOrClientId
	}
	return ""
}

// MsgResetRateLimitResponse is the response type for ResetRateLimit.
type MsgResetRateLimitResponse struct {
}

func (m *MsgResetRateLimitResponse) Reset()         { *m = MsgResetRateLimitResponse{} }
func (m *MsgResetRateLimitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgResetRateLimitResponse) ProtoMessage()    {}
func (*MsgResetRateLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bbfc0abda512109, []int{7}
}
func (m *MsgResetRateLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgResetRateLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgResetRateLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgResetRateLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgResetRateLimitResponse.Merge(m, src)
}
func (m *MsgResetRateLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgResetRateLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgResetRateLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgResetRateLimitResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddRateLimit)(nil), "ibc.applications.rate_limiting.v1.MsgAddRateLimit")
	proto.RegisterType((*MsgAddRateLimitResponse)(nil), "ibc.applications.rate_limiting.v1.MsgAddRateLimitResponse")
	proto.RegisterType((*MsgUpdateRateLimit)(nil), "ibc.applications.rate_limiting.v1.MsgUpdateRateLimit")
	proto.RegisterType((*MsgUpdateRateLimitResponse)(nil), "ibc.applications.rate_limiting.v1.MsgUpdateRateLimitResponse")
	proto.RegisterType((*MsgRemoveRateLimit)(nil), "ibc.applications.rate_limiting.v1.MsgRemoveRateLimit")
	proto.RegisterType((*MsgRemoveRateLimitResponse)(nil), "ibc.applications.rate_limiting.v1.MsgRemoveRateLimitResponse")
	proto.RegisterType((*MsgResetRateLimit)(nil), "ibc.applications.rate_limiting.v1.MsgResetRateLimit")
	proto.RegisterType((*MsgResetRateLimitResponse)(nil), "ibc.applications.rate_limiting.v1.MsgResetRateLimitResponse")
}

func init() {
	proto.RegisterFile("ibc/applications/rate_limiting/v1/tx.proto", fileDescriptor_5bbfc0abda512109)
}

var fileDescriptor_5bbfc0abda512109 = []byte{
	// 627 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xce, 0xf6, 0x17, 0x38, 0x68, 0x6b, 0x97, 0x48, 0x37, 0xdb, 0xba, 0xad, 0x01, 0xa1, 0x46,
	0xbb, 0xd3, 0x56, 0xbd, 0x14, 0x7b, 0x68, 0x3d, 0x68, 0xc1, 0xa2, 0x6c, 0x11, 0xc1, 0xcb, 0xb2,
	0xd9, 0x19, 0x36, 0x83, 0x99, 0x99, 0x65, 0x67, 0xb2, 0xc4, 0x8b, 0x88, 0x08, 0x82, 0x27, 0xff,
	0x0b, 0xaf, 0x39, 0x78, 0x11, 0xff, 0x81, 0x1e, 0x8b, 0x27, 0xf1, 0x50, 0x24, 0x39, 0xe4, 0xe6,
	0xc9, 0x3f, 0x40, 0xf6, 0x47, 0x42, 0x32, 0x41, 0x9a, 0xe6, 0xd4, 0x83, 0x97, 0x90, 0xf9, 0xde,
	0xfb, 0xde, 0x7e, 0x6f, 0xbe, 0x99, 0x79, 0xa0, 0x42, 0xaa, 0x3e, 0xf4, 0xc2, 0xb0, 0x4e, 0x7c,
	0x4f, 0x12, 0xce, 0x04, 0x8c, 0x3c, 0x89, 0xdd, 0x3a, 0xa1, 0x44, 0x12, 0x16, 0xc0, 0x78, 0x0b,
	0xca, 0xa6, 0x1d, 0x46, 0x5c, 0x72, 0xfd, 0x06, 0xa9, 0xfa, 0xf6, 0x60, 0xae, 0x3d, 0x94, 0x6b,
	0xc7, 0x5b, 0xe6, 0xa2, 0x47, 0x09, 0xe3, 0x30, 0xfd, 0xcd, 0x58, 0xe6, 0x92, 0xcf, 0x05, 0xe5,
	0x02, 0x52, 0x91, 0x56, 0xa3, 0x22, 0xc8, 0x03, 0xa5, 0x2c, 0xe0, 0xa6, 0x2b, 0x98, 0x2d, 0xf2,
	0x50, 0x31, 0xe0, 0x01, 0xcf, 0xf0, 0xe4, 0x5f, 0x86, 0x96, 0x7f, 0x4f, 0x81, 0x85, 0x43, 0x11,
	0xec, 0x21, 0xe4, 0x78, 0x12, 0x3f, 0x49, 0x3e, 0xab, 0x6f, 0x82, 0x39, 0x41, 0x02, 0x86, 0x23,
	0x43, 0x5b, 0xd3, 0xd6, 0x2f, 0xed, 0x1b, 0xdf, 0xbf, 0x6c, 0x14, 0xf3, 0x5a, 0x7b, 0x08, 0x45,
	0x58, 0x88, 0x23, 0x19, 0x11, 0x16, 0x38, 0x79, 0x9e, 0x5e, 0x04, 0xb3, 0x08, 0x33, 0x4e, 0x8d,
	0xa9, 0x84, 0xe0, 0x64, 0x0b, 0x1d, 0x82, 0xa2, 0x5f, 0xf3, 0x18, 0xc3, 0x75, 0x97, 0x47, 0xae,
	0x5f, 0x27, 0x98, 0x49, 0x97, 0x20, 0x63, 0x3a, 0x4d, 0x5a, 0xcc, 0x63, 0x4f, 0xa3, 0x87, 0x69,
	0xe4, 0x00, 0xe9, 0x8f, 0xc0, 0x55, 0xea, 0x35, 0xdd, 0x10, 0x47, 0x7e, 0x92, 0x2a, 0x30, 0x43,
	0xc6, 0x4c, 0x2a, 0xe1, 0xfa, 0xf1, 0xe9, 0x6a, 0xe1, 0xe7, 0xe9, 0xea, 0xb5, 0x4c, 0x86, 0x40,
	0xaf, 0x6c, 0xc2, 0x21, 0xf5, 0x64, 0xcd, 0x3e, 0x60, 0xd2, 0x99, 0xa7, 0x5e, 0xf3, 0x59, 0xc6,
	0x3a, 0xc2, 0x6c, 0xa4, 0x50, 0x84, 0xfd, 0xd8, 0x98, 0x3d, 0x67, 0x21, 0x07, 0xfb, 0xb1, 0x7e,
	0x13, 0xcc, 0xa3, 0x46, 0x94, 0x3a, 0xe3, 0xd6, 0x78, 0x23, 0x12, 0xc6, 0xdc, 0x9a, 0xb6, 0x3e,
	0xe3, 0x5c, 0xe9, 0xa1, 0x8f, 0x13, 0x70, 0xe7, 0xd6, 0xbb, 0x6e, 0xab, 0x92, 0x6f, 0xc6, 0xc7,
	0x6e, 0xab, 0x52, 0x4a, 0x4c, 0x4c, 0x3d, 0x84, 0xca, 0xe6, 0x96, 0x4b, 0x60, 0x49, 0x81, 0x1c,
	0x2c, 0x42, 0xce, 0x04, 0x2e, 0xff, 0x99, 0x02, 0xfa, 0xa1, 0x08, 0x9e, 0x87, 0xc8, 0x93, 0xf8,
	0xbf, 0x1d, 0x93, 0xdb, 0x71, 0x47, 0xb1, 0x63, 0x65, 0xc8, 0x0e, 0x65, 0x7f, 0xcb, 0x2b, 0xc0,
	0x1c, 0x45, 0xfb, 0xa6, 0x7c, 0xd3, 0x52, 0x53, 0x1c, 0x4c, 0x79, 0x7c, 0x01, 0x4c, 0x39, 0xa3,
	0x37, 0x45, 0x66, 0xde, 0x9b, 0x82, 0xf6, 0x7b, 0xfb, 0xaa, 0x81, 0xc5, 0x34, 0x2c, 0xb0, 0xbc,
	0x00, 0xad, 0xdd, 0x56, 0x5a, 0x5b, 0x56, 0x5a, 0x1b, 0x54, 0x59, 0x5e, 0x06, 0xa5, 0x11, 0xb0,
	0xd7, 0xd8, 0xf6, 0xe7, 0x19, 0x30, 0x7d, 0x28, 0x02, 0xfd, 0x0d, 0xb8, 0x3c, 0xf4, 0xb2, 0x6d,
	0xdb, 0x67, 0x3e, 0xb7, 0xb6, 0x72, 0x3b, 0xcd, 0x9d, 0xf3, 0x73, 0x7a, 0x3a, 0xf4, 0x0f, 0x1a,
	0x58, 0x50, 0xaf, 0xf3, 0xfd, 0xf1, 0xea, 0x29, 0x34, 0x73, 0x77, 0x22, 0xda, 0x90, 0x12, 0xf5,
	0x0c, 0x8f, 0xa9, 0x44, 0xa1, 0x8d, 0xab, 0xe4, 0x1f, 0x87, 0x4e, 0x7f, 0xaf, 0x81, 0x79, 0xe5,
	0xc4, 0xdd, 0x1b, 0xb7, 0xe2, 0x20, 0xcb, 0x7c, 0x30, 0x09, 0xab, 0x27, 0xc3, 0x9c, 0x7d, 0xdb,
	0x6d, 0x55, 0xb4, 0xfd, 0x17, 0xc7, 0x6d, 0x4b, 0x3b, 0x69, 0x5b, 0xda, 0xaf, 0xb6, 0xa5, 0x7d,
	0xea, 0x58, 0x85, 0x93, 0x8e, 0x55, 0xf8, 0xd1, 0xb1, 0x0a, 0x2f, 0x77, 0x03, 0x22, 0x6b, 0x8d,
	0xaa, 0xed, 0x73, 0x9a, 0x0f, 0x52, 0x48, 0xaa, 0xfe, 0x46, 0xc0, 0x61, 0xbc, 0xb5, 0x09, 0x29,
	0x47, 0x8d, 0x3a, 0x16, 0xc9, 0x98, 0xcf, 0xc6, 0xfb, 0x46, 0x7f, 0xbc, 0xcb, 0xd7, 0x21, 0x16,
	0xd5, 0xb9, 0x74, 0xbe, 0xde, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x13, 0x14, 0xda, 0xc9, 0x0d,
	0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Gov tx to add a new rate limit
	AddRateLimit(ctx context.Context, in *MsgAddRateLimit, opts ...grpc.CallOption) (*MsgAddRateLimitResponse, error)
	// Gov tx to update an existing rate limit
	UpdateRateLimit(ctx context.Context, in *MsgUpdateRateLimit, opts ...grpc.CallOption) (*MsgUpdateRateLimitResponse, error)
	// Gov tx to remove a rate limit
	RemoveRateLimit(ctx context.Context, in *MsgRemoveRateLimit, opts ...grpc.CallOption) (*MsgRemoveRateLimitResponse, error)
	// Gov tx to reset the flow on a rate limit
	ResetRateLimit(ctx context.Context, in *MsgResetRateLimit, opts ...grpc.CallOption) (*MsgResetRateLimitResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddRateLimit(ctx context.Context, in *MsgAddRateLimit, opts ...grpc.CallOption) (*MsgAddRateLimitResponse, error) {
	out := new(MsgAddRateLimitResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.rate_limiting.v1.Msg/AddRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRateLimit(ctx context.Context, in *MsgUpdateRateLimit, opts ...grpc.CallOption) (*MsgUpdateRateLimitResponse, error) {
	out := new(MsgUpdateRateLimitResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.rate_limiting.v1.Msg/UpdateRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveRateLimit(ctx context.Context, in *MsgRemoveRateLimit, opts ...grpc.CallOption) (*MsgRemoveRateLimitResponse, error) {
	out := new(MsgRemoveRateLimitResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.rate_limiting.v1.Msg/RemoveRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ResetRateLimit(ctx context.Context, in *MsgResetRateLimit, opts ...grpc.CallOption) (*MsgResetRateLimitResponse, error) {
	out := new(MsgResetRateLimitResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.rate_limiting.v1.Msg/ResetRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Gov tx to add a new rate limit
	AddRateLimit(context.Context, *MsgAddRateLimit) (*MsgAddRateLimitResponse, error)
	// Gov tx to update an existing rate limit
	UpdateRateLimit(context.Context, *MsgUpdateRateLimit) (*MsgUpdateRateLimitResponse, error)
	// Gov tx to remove a rate limit
	RemoveRateLimit(context.Context, *MsgRemoveRateLimit) (*MsgRemoveRateLimitResponse, error)
	// Gov tx to reset the flow on a rate limit
	ResetRateLimit(context.Context, *MsgResetRateLimit) (*MsgResetRateLimitResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddRateLimit(ctx context.Context, req *MsgAddRateLimit) (*MsgAddRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRateLimit not implemented")
}
func (*UnimplementedMsgServer) UpdateRateLimit(ctx context.Context, req *MsgUpdateRateLimit) (*MsgUpdateRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRateLimit not implemented")
}
func (*UnimplementedMsgServer) RemoveRateLimit(ctx context.Context, req *MsgRemoveRateLimit) (*MsgRemoveRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRateLimit not implemented")
}
func (*UnimplementedMsgServer) ResetRateLimit(ctx context.Context, req *MsgResetRateLimit) (*MsgResetRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetRateLimit not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddRateLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.rate_limiting.v1.Msg/AddRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddRateLimit(ctx, req.(*MsgAddRateLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRateLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.rate_limiting.v1.Msg/UpdateRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRateLimit(ctx, req.(*MsgUpdateRateLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveRateLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.rate_limiting.v1.Msg/RemoveRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveRateLimit(ctx, req.(*MsgRemoveRateLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ResetRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgResetRateLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ResetRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.rate_limiting.v1.Msg/ResetRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ResetRateLimit(ctx, req.(*MsgResetRateLimit))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.applications.rate_limiting.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRateLimit",
			Handler:    _Msg_AddRateLimit_Handler,
		},
		{
			MethodName: "UpdateRateLimit",
			Handler:    _Msg_UpdateRateLimit_Handler,
		},
		{
			MethodName: "RemoveRateLimit",
			Handler:    _Msg_RemoveRateLimit_Handler,
		},
		{
			MethodName: "ResetRateLimit",
			Handler:    _Msg_ResetRateLimit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/applications/rate_limiting/v1/tx.proto",
}

func (m *MsgAddRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DurationHours != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DurationHours))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.MaxPercentRecv.Size()
		i -= size
		if _, err := m.MaxPercentRecv.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MaxPercentSend.Size()
		i -= size
		if _, err := m.MaxPercentSend.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ChannelOrClientId) > 0 {
		i -= len(m.ChannelOrClientId)
		copy(dAtA[i:], m.ChannelOrClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelOrClientId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddRateLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRateLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRateLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DurationHours != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DurationHours))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.MaxPercentRecv.Size()
		i -= size
		if _, err := m.MaxPercentRecv.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MaxPercentSend.Size()
		i -= size
		if _, err := m.MaxPercentSend.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ChannelOrClientId) > 0 {
		i -= len(m.ChannelOrClientId)
		copy(dAtA[i:], m.ChannelOrClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelOrClientId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRateLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRateLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRateLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelOrClientId) > 0 {
		i -= len(m.ChannelOrClientId)
		copy(dAtA[i:], m.ChannelOrClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelOrClientId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveRateLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveRateLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveRateLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgResetRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgResetRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgResetRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelOrClientId) > 0 {
		i -= len(m.ChannelOrClientId)
		copy(dAtA[i:], m.ChannelOrClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelOrClientId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgResetRateLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgResetRateLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgResetRateLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelOrClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MaxPercentSend.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MaxPercentRecv.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.DurationHours != 0 {
		n += 1 + sovTx(uint64(m.DurationHours))
	}
	return n
}

func (m *MsgAddRateLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelOrClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MaxPercentSend.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MaxPercentRecv.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.DurationHours != 0 {
		n += 1 + sovTx(uint64(m.DurationHours))
	}
	return n
}

func (m *MsgUpdateRateLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelOrClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveRateLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgResetRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelOrClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgResetRateLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelOrClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelOrClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPercentSend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPercentSend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPercentRecv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPercentRecv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationHours", wireType)
			}
			m.DurationHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationHours |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRateLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRateLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRateLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelOrClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelOrClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPercentSend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPercentSend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPercentRecv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPercentRecv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationHours", wireType)
			}
			m.DurationHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationHours |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRateLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRateLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRateLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelOrClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelOrClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveRateLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveRateLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveRateLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgResetRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgResetRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgResetRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelOrClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelOrClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgResetRateLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgResetRateLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgResetRateLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
