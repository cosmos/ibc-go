// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/rate_limiting/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Queries all rate limits
type QueryAllRateLimitsRequest struct {
}

func (m *QueryAllRateLimitsRequest) Reset()         { *m = QueryAllRateLimitsRequest{} }
func (m *QueryAllRateLimitsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRateLimitsRequest) ProtoMessage()    {}
func (*QueryAllRateLimitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f55a91bf266ae0f7, []int{0}
}
func (m *QueryAllRateLimitsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRateLimitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRateLimitsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRateLimitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRateLimitsRequest.Merge(m, src)
}
func (m *QueryAllRateLimitsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRateLimitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRateLimitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRateLimitsRequest proto.InternalMessageInfo

type QueryAllRateLimitsResponse struct {
	RateLimits []RateLimit `protobuf:"bytes,1,rep,name=rate_limits,json=rateLimits,proto3" json:"rate_limits"`
}

func (m *QueryAllRateLimitsResponse) Reset()         { *m = QueryAllRateLimitsResponse{} }
func (m *QueryAllRateLimitsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRateLimitsResponse) ProtoMessage()    {}
func (*QueryAllRateLimitsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f55a91bf266ae0f7, []int{1}
}
func (m *QueryAllRateLimitsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRateLimitsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRateLimitsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRateLimitsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRateLimitsResponse.Merge(m, src)
}
func (m *QueryAllRateLimitsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRateLimitsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRateLimitsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRateLimitsResponse proto.InternalMessageInfo

func (m *QueryAllRateLimitsResponse) GetRateLimits() []RateLimit {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

// Queries a specific rate limit by channel ID and denom
type QueryRateLimitRequest struct {
	Denom             string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	ChannelOrClientId string `protobuf:"bytes,2,opt,name=channel_or_client_id,json=channelOrClientId,proto3" json:"channel_or_client_id,omitempty"`
}

func (m *QueryRateLimitRequest) Reset()         { *m = QueryRateLimitRequest{} }
func (m *QueryRateLimitRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimitRequest) ProtoMessage()    {}
func (*QueryRateLimitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f55a91bf266ae0f7, []int{2}
}
func (m *QueryRateLimitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimitRequest.Merge(m, src)
}
func (m *QueryRateLimitRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimitRequest proto.InternalMessageInfo

func (m *QueryRateLimitRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryRateLimitRequest) GetChannelOrClientId() string {
	if m != nil {
		return m.ChannelOrClientId
	}
	return ""
}

type QueryRateLimitResponse struct {
	RateLimit *RateLimit `protobuf:"bytes,1,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (m *QueryRateLimitResponse) Reset()         { *m = QueryRateLimitResponse{} }
func (m *QueryRateLimitResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimitResponse) ProtoMessage()    {}
func (*QueryRateLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f55a91bf266ae0f7, []int{3}
}
func (m *QueryRateLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimitResponse.Merge(m, src)
}
func (m *QueryRateLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimitResponse proto.InternalMessageInfo

func (m *QueryRateLimitResponse) GetRateLimit() *RateLimit {
	if m != nil {
		return m.RateLimit
	}
	return nil
}

// Queries all the rate limits for a given chain
type QueryRateLimitsByChainIdRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryRateLimitsByChainIdRequest) Reset()         { *m = QueryRateLimitsByChainIdRequest{} }
func (m *QueryRateLimitsByChainIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimitsByChainIdRequest) ProtoMessage()    {}
func (*QueryRateLimitsByChainIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f55a91bf266ae0f7, []int{4}
}
func (m *QueryRateLimitsByChainIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimitsByChainIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimitsByChainIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimitsByChainIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimitsByChainIdRequest.Merge(m, src)
}
func (m *QueryRateLimitsByChainIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimitsByChainIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimitsByChainIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimitsByChainIdRequest proto.InternalMessageInfo

func (m *QueryRateLimitsByChainIdRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type QueryRateLimitsByChainIdResponse struct {
	RateLimits []RateLimit `protobuf:"bytes,1,rep,name=rate_limits,json=rateLimits,proto3" json:"rate_limits"`
}

func (m *QueryRateLimitsByChainIdResponse) Reset()         { *m = QueryRateLimitsByChainIdResponse{} }
func (m *QueryRateLimitsByChainIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimitsByChainIdResponse) ProtoMessage()    {}
func (*QueryRateLimitsByChainIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f55a91bf266ae0f7, []int{5}
}
func (m *QueryRateLimitsByChainIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimitsByChainIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimitsByChainIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimitsByChainIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimitsByChainIdResponse.Merge(m, src)
}
func (m *QueryRateLimitsByChainIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimitsByChainIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimitsByChainIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimitsByChainIdResponse proto.InternalMessageInfo

func (m *QueryRateLimitsByChainIdResponse) GetRateLimits() []RateLimit {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

// Queries all the rate limits for a given channel or client ID
type QueryRateLimitsByChannelOrClientIdRequest struct {
	ChannelOrClientId string `protobuf:"bytes,1,opt,name=channel_or_client_id,json=channelOrClientId,proto3" json:"channel_or_client_id,omitempty"`
}

func (m *QueryRateLimitsByChannelOrClientIdRequest) Reset() {
	*m = QueryRateLimitsByChannelOrClientIdRequest{}
}
func (m *QueryRateLimitsByChannelOrClientIdRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryRateLimitsByChannelOrClientIdRequest) ProtoMessage() {}
func (*QueryRateLimitsByChannelOrClientIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f55a91bf266ae0f7, []int{6}
}
func (m *QueryRateLimitsByChannelOrClientIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimitsByChannelOrClientIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimitsByChannelOrClientIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimitsByChannelOrClientIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimitsByChannelOrClientIdRequest.Merge(m, src)
}
func (m *QueryRateLimitsByChannelOrClientIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimitsByChannelOrClientIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimitsByChannelOrClientIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimitsByChannelOrClientIdRequest proto.InternalMessageInfo

func (m *QueryRateLimitsByChannelOrClientIdRequest) GetChannelOrClientId() string {
	if m != nil {
		return m.ChannelOrClientId
	}
	return ""
}

type QueryRateLimitsByChannelOrClientIdResponse struct {
	RateLimits []RateLimit `protobuf:"bytes,1,rep,name=rate_limits,json=rateLimits,proto3" json:"rate_limits"`
}

func (m *QueryRateLimitsByChannelOrClientIdResponse) Reset() {
	*m = QueryRateLimitsByChannelOrClientIdResponse{}
}
func (m *QueryRateLimitsByChannelOrClientIdResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryRateLimitsByChannelOrClientIdResponse) ProtoMessage() {}
func (*QueryRateLimitsByChannelOrClientIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f55a91bf266ae0f7, []int{7}
}
func (m *QueryRateLimitsByChannelOrClientIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimitsByChannelOrClientIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimitsByChannelOrClientIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimitsByChannelOrClientIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimitsByChannelOrClientIdResponse.Merge(m, src)
}
func (m *QueryRateLimitsByChannelOrClientIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimitsByChannelOrClientIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimitsByChannelOrClientIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimitsByChannelOrClientIdResponse proto.InternalMessageInfo

func (m *QueryRateLimitsByChannelOrClientIdResponse) GetRateLimits() []RateLimit {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

// Queries all blacklisted denoms
type QueryAllBlacklistedDenomsRequest struct {
}

func (m *QueryAllBlacklistedDenomsRequest) Reset()         { *m = QueryAllBlacklistedDenomsRequest{} }
func (m *QueryAllBlacklistedDenomsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlacklistedDenomsRequest) ProtoMessage()    {}
func (*QueryAllBlacklistedDenomsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f55a91bf266ae0f7, []int{8}
}
func (m *QueryAllBlacklistedDenomsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlacklistedDenomsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlacklistedDenomsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlacklistedDenomsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlacklistedDenomsRequest.Merge(m, src)
}
func (m *QueryAllBlacklistedDenomsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlacklistedDenomsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlacklistedDenomsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlacklistedDenomsRequest proto.InternalMessageInfo

type QueryAllBlacklistedDenomsResponse struct {
	Denoms []string `protobuf:"bytes,1,rep,name=denoms,proto3" json:"denoms,omitempty"`
}

func (m *QueryAllBlacklistedDenomsResponse) Reset()         { *m = QueryAllBlacklistedDenomsResponse{} }
func (m *QueryAllBlacklistedDenomsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlacklistedDenomsResponse) ProtoMessage()    {}
func (*QueryAllBlacklistedDenomsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f55a91bf266ae0f7, []int{9}
}
func (m *QueryAllBlacklistedDenomsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlacklistedDenomsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlacklistedDenomsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlacklistedDenomsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlacklistedDenomsResponse.Merge(m, src)
}
func (m *QueryAllBlacklistedDenomsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlacklistedDenomsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlacklistedDenomsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlacklistedDenomsResponse proto.InternalMessageInfo

func (m *QueryAllBlacklistedDenomsResponse) GetDenoms() []string {
	if m != nil {
		return m.Denoms
	}
	return nil
}

// Queries all whitelisted address pairs
type QueryAllWhitelistedAddressesRequest struct {
}

func (m *QueryAllWhitelistedAddressesRequest) Reset()         { *m = QueryAllWhitelistedAddressesRequest{} }
func (m *QueryAllWhitelistedAddressesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllWhitelistedAddressesRequest) ProtoMessage()    {}
func (*QueryAllWhitelistedAddressesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f55a91bf266ae0f7, []int{10}
}
func (m *QueryAllWhitelistedAddressesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllWhitelistedAddressesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllWhitelistedAddressesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllWhitelistedAddressesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllWhitelistedAddressesRequest.Merge(m, src)
}
func (m *QueryAllWhitelistedAddressesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllWhitelistedAddressesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllWhitelistedAddressesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllWhitelistedAddressesRequest proto.InternalMessageInfo

type QueryAllWhitelistedAddressesResponse struct {
	AddressPairs []WhitelistedAddressPair `protobuf:"bytes,1,rep,name=address_pairs,json=addressPairs,proto3" json:"address_pairs"`
}

func (m *QueryAllWhitelistedAddressesResponse) Reset()         { *m = QueryAllWhitelistedAddressesResponse{} }
func (m *QueryAllWhitelistedAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllWhitelistedAddressesResponse) ProtoMessage()    {}
func (*QueryAllWhitelistedAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f55a91bf266ae0f7, []int{11}
}
func (m *QueryAllWhitelistedAddressesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllWhitelistedAddressesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllWhitelistedAddressesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllWhitelistedAddressesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllWhitelistedAddressesResponse.Merge(m, src)
}
func (m *QueryAllWhitelistedAddressesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllWhitelistedAddressesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllWhitelistedAddressesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllWhitelistedAddressesResponse proto.InternalMessageInfo

func (m *QueryAllWhitelistedAddressesResponse) GetAddressPairs() []WhitelistedAddressPair {
	if m != nil {
		return m.AddressPairs
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryAllRateLimitsRequest)(nil), "ibc.applications.rate_limiting.v1.QueryAllRateLimitsRequest")
	proto.RegisterType((*QueryAllRateLimitsResponse)(nil), "ibc.applications.rate_limiting.v1.QueryAllRateLimitsResponse")
	proto.RegisterType((*QueryRateLimitRequest)(nil), "ibc.applications.rate_limiting.v1.QueryRateLimitRequest")
	proto.RegisterType((*QueryRateLimitResponse)(nil), "ibc.applications.rate_limiting.v1.QueryRateLimitResponse")
	proto.RegisterType((*QueryRateLimitsByChainIdRequest)(nil), "ibc.applications.rate_limiting.v1.QueryRateLimitsByChainIdRequest")
	proto.RegisterType((*QueryRateLimitsByChainIdResponse)(nil), "ibc.applications.rate_limiting.v1.QueryRateLimitsByChainIdResponse")
	proto.RegisterType((*QueryRateLimitsByChannelOrClientIdRequest)(nil), "ibc.applications.rate_limiting.v1.QueryRateLimitsByChannelOrClientIdRequest")
	proto.RegisterType((*QueryRateLimitsByChannelOrClientIdResponse)(nil), "ibc.applications.rate_limiting.v1.QueryRateLimitsByChannelOrClientIdResponse")
	proto.RegisterType((*QueryAllBlacklistedDenomsRequest)(nil), "ibc.applications.rate_limiting.v1.QueryAllBlacklistedDenomsRequest")
	proto.RegisterType((*QueryAllBlacklistedDenomsResponse)(nil), "ibc.applications.rate_limiting.v1.QueryAllBlacklistedDenomsResponse")
	proto.RegisterType((*QueryAllWhitelistedAddressesRequest)(nil), "ibc.applications.rate_limiting.v1.QueryAllWhitelistedAddressesRequest")
	proto.RegisterType((*QueryAllWhitelistedAddressesResponse)(nil), "ibc.applications.rate_limiting.v1.QueryAllWhitelistedAddressesResponse")
}

func init() {
	proto.RegisterFile("ibc/applications/rate_limiting/v1/query.proto", fileDescriptor_f55a91bf266ae0f7)
}

var fileDescriptor_f55a91bf266ae0f7 = []byte{
	// 741 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x41, 0x4f, 0x13, 0x4d,
	0x18, 0xee, 0xf2, 0x7d, 0xf0, 0x7d, 0x7d, 0x91, 0x83, 0x63, 0x45, 0x58, 0xb5, 0xc0, 0x2a, 0x11,
	0x8d, 0xed, 0x0a, 0xc6, 0x28, 0x0a, 0x31, 0xb4, 0x04, 0x25, 0x22, 0x62, 0x4d, 0x24, 0x31, 0xc6,
	0x66, 0xba, 0x3b, 0x69, 0x27, 0x6e, 0x77, 0x96, 0x9d, 0x2d, 0xa4, 0x31, 0x1c, 0xf4, 0xcc, 0xc1,
	0xc4, 0x9f, 0xe3, 0x1f, 0xe0, 0x48, 0xe2, 0x85, 0x93, 0x31, 0xc5, 0x93, 0x07, 0x7f, 0x83, 0xd9,
	0xd9, 0xe9, 0x96, 0xc2, 0xb6, 0xb4, 0x45, 0x6e, 0xdd, 0x9d, 0xf7, 0x7d, 0xde, 0xe7, 0x79, 0xf6,
	0x9d, 0x27, 0x85, 0x14, 0x2d, 0x18, 0x3a, 0x76, 0x1c, 0x8b, 0x1a, 0xd8, 0xa3, 0xcc, 0xe6, 0xba,
	0x8b, 0x3d, 0x92, 0xb7, 0x68, 0x99, 0x7a, 0xd4, 0x2e, 0xea, 0x9b, 0xd3, 0xfa, 0x46, 0x85, 0xb8,
	0xd5, 0xb4, 0xe3, 0x32, 0x8f, 0xa1, 0x09, 0x5a, 0x30, 0xd2, 0x87, 0xcb, 0xd3, 0x4d, 0xe5, 0xe9,
	0xcd, 0x69, 0x35, 0x51, 0x64, 0x45, 0x26, 0xaa, 0x75, 0xff, 0x57, 0xd0, 0xa8, 0x5e, 0x29, 0x32,
	0x56, 0xb4, 0x88, 0x8e, 0x1d, 0xaa, 0x63, 0xdb, 0x66, 0x9e, 0x6c, 0x0f, 0x4e, 0xef, 0x9d, 0xcc,
	0xa2, 0x79, 0x8e, 0x68, 0xd3, 0x2e, 0xc3, 0xe8, 0x4b, 0x9f, 0xdc, 0x82, 0x65, 0xe5, 0xb0, 0x47,
	0x56, 0xfc, 0x53, 0x9e, 0x23, 0x1b, 0x15, 0xc2, 0x3d, 0x6d, 0x03, 0xd4, 0xa8, 0x43, 0xee, 0x30,
	0x9b, 0x13, 0xf4, 0x0a, 0x06, 0x1b, 0x88, 0x7c, 0x44, 0x19, 0xff, 0x67, 0x6a, 0x70, 0xe6, 0x76,
	0xfa, 0x44, 0x79, 0xe9, 0x10, 0x2b, 0xf3, 0xef, 0xee, 0xf7, 0xb1, 0x58, 0x0e, 0xdc, 0x10, 0x5c,
	0x7b, 0x07, 0x17, 0xc5, 0xc8, 0xb0, 0x46, 0x72, 0x41, 0x09, 0xe8, 0x37, 0x89, 0xcd, 0xca, 0x23,
	0xca, 0xb8, 0x32, 0x15, 0xcf, 0x05, 0x0f, 0x48, 0x87, 0x84, 0x51, 0xc2, 0xb6, 0x4d, 0xac, 0x3c,
	0x73, 0xf3, 0x86, 0x45, 0x89, 0xed, 0xe5, 0xa9, 0x39, 0xd2, 0x27, 0x8a, 0xce, 0xcb, 0xb3, 0x17,
	0x6e, 0x56, 0x9c, 0x2c, 0x9b, 0x1a, 0x81, 0xe1, 0xa3, 0xf8, 0x52, 0xce, 0x33, 0x80, 0x06, 0x53,
	0x31, 0xa5, 0x4b, 0x35, 0xb9, 0x78, 0xa8, 0x43, 0x9b, 0x83, 0xb1, 0xe6, 0x31, 0x3c, 0x53, 0xcd,
	0x96, 0x30, 0xb5, 0x97, 0xcd, 0xba, 0xa0, 0x51, 0xf8, 0xdf, 0xf0, 0xdf, 0xf8, 0x74, 0x03, 0x4d,
	0xff, 0x19, 0x41, 0x85, 0xb6, 0x05, 0xe3, 0xad, 0xbb, 0xcf, 0xd2, 0xfd, 0xb7, 0x70, 0x33, 0x6a,
	0x70, 0xb3, 0x87, 0x75, 0x01, 0xad, 0xbc, 0x57, 0x5a, 0x79, 0xff, 0x51, 0x81, 0x5b, 0x9d, 0xc0,
	0x9f, 0xa5, 0x42, 0x4d, 0x5a, 0xbb, 0x60, 0x59, 0x19, 0x0b, 0x1b, 0xef, 0x2d, 0xca, 0x3d, 0x62,
	0x2e, 0xfa, 0xcb, 0x14, 0xae, 0xfd, 0x23, 0x98, 0x68, 0x53, 0x23, 0xd9, 0x0d, 0xc3, 0x80, 0x58,
	0xc1, 0x80, 0x58, 0x3c, 0x27, 0x9f, 0xb4, 0x49, 0xb8, 0x56, 0x6f, 0x5e, 0x2f, 0x51, 0x8f, 0x04,
	0xcd, 0x0b, 0xa6, 0xe9, 0x12, 0xce, 0x49, 0x38, 0x63, 0x47, 0x81, 0xeb, 0xed, 0xeb, 0xe4, 0x1c,
	0x13, 0x86, 0x70, 0xf0, 0x32, 0xef, 0x60, 0xea, 0xd6, 0x7d, 0x98, 0xed, 0xc0, 0x87, 0xe3, 0xb8,
	0x6b, 0x98, 0xba, 0xd2, 0x94, 0x73, 0xb8, 0xf1, 0x8a, 0xcf, 0xfc, 0x02, 0xe8, 0x17, 0x74, 0xd0,
	0x57, 0x05, 0x86, 0x9a, 0xee, 0x3b, 0x9a, 0xeb, 0x60, 0x54, 0xcb, 0x0c, 0x51, 0xe7, 0x7b, 0xec,
	0x0e, 0xe4, 0x6b, 0xa9, 0x4f, 0xdf, 0x7e, 0x7e, 0xe9, 0xbb, 0x81, 0x26, 0x75, 0x99, 0x6f, 0x41,
	0xae, 0xa5, 0x8e, 0xe6, 0x5a, 0xb0, 0x24, 0x68, 0x5f, 0x81, 0x78, 0x88, 0x82, 0x1e, 0x74, 0x3a,
	0xfb, 0x68, 0xda, 0xa8, 0xb3, 0x3d, 0x74, 0x4a, 0xc6, 0xaf, 0x05, 0xe3, 0x35, 0xb4, 0xda, 0x09,
	0xe3, 0x43, 0xbf, 0x3e, 0x44, 0x5d, 0xa6, 0x6d, 0xbd, 0x50, 0xcd, 0x07, 0x51, 0x57, 0x53, 0xe0,
	0x42, 0x44, 0x20, 0xa0, 0x4c, 0xd7, 0x54, 0x8f, 0x65, 0x91, 0x9a, 0x3d, 0x15, 0x86, 0x14, 0x9e,
	0x11, 0xc2, 0xe7, 0xd0, 0xc3, 0xee, 0x84, 0x73, 0xa1, 0x5c, 0xe4, 0xe0, 0x36, 0xda, 0xe9, 0x83,
	0xab, 0x6d, 0xd3, 0x01, 0xad, 0xf4, 0x48, 0x35, 0x32, 0xc3, 0xd4, 0xe7, 0x7f, 0x09, 0x4d, 0x5a,
	0xb0, 0x2a, 0x2c, 0x78, 0x8a, 0x96, 0x7a, 0xb1, 0xe0, 0xf8, 0xc7, 0xf7, 0xbf, 0x79, 0x22, 0x2a,
	0x85, 0x50, 0xb6, 0x8b, 0x5b, 0xd5, 0x2a, 0xe7, 0xd4, 0xc5, 0xd3, 0x81, 0x48, 0xcd, 0x8f, 0x85,
	0xe6, 0x59, 0x74, 0xbf, 0x23, 0xcd, 0x85, 0x06, 0x4e, 0xb0, 0xd7, 0x1c, 0xfd, 0x56, 0xe0, 0x52,
	0x8b, 0x14, 0x44, 0x4b, 0x5d, 0x50, 0x6c, 0x13, 0xb7, 0xea, 0x93, 0x53, 0xe3, 0xf4, 0xb4, 0xe4,
	0x5b, 0x0d, 0xa8, 0x3c, 0xae, 0x63, 0x65, 0xd6, 0x77, 0x6b, 0x49, 0x65, 0xaf, 0x96, 0x54, 0x7e,
	0xd4, 0x92, 0xca, 0xe7, 0x83, 0x64, 0x6c, 0xef, 0x20, 0x19, 0xdb, 0x3f, 0x48, 0xc6, 0xde, 0xcc,
	0x17, 0xa9, 0x57, 0xaa, 0x14, 0xd2, 0x06, 0x2b, 0xeb, 0x06, 0xe3, 0x65, 0xc6, 0xfd, 0x31, 0xa9,
	0x22, 0xd3, 0x37, 0xa7, 0xef, 0xe8, 0x65, 0x66, 0x56, 0x2c, 0xc2, 0xa3, 0xa6, 0x7a, 0x55, 0x87,
	0xf0, 0xc2, 0x80, 0xf8, 0x4f, 0x77, 0xf7, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x2d, 0x29,
	0x06, 0x92, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries all rate limits
	AllRateLimits(ctx context.Context, in *QueryAllRateLimitsRequest, opts ...grpc.CallOption) (*QueryAllRateLimitsResponse, error)
	// Queries a specific rate limit by channel ID and denom
	// Ex:
	//  - /ratelimit/{channel_or_client_id}/by_denom?denom={denom}
	RateLimit(ctx context.Context, in *QueryRateLimitRequest, opts ...grpc.CallOption) (*QueryRateLimitResponse, error)
	// Queries all the rate limits for a given chain
	RateLimitsByChainId(ctx context.Context, in *QueryRateLimitsByChainIdRequest, opts ...grpc.CallOption) (*QueryRateLimitsByChainIdResponse, error)
	// Queries all the rate limits for a given channel ID
	RateLimitsByChannelOrClientId(ctx context.Context, in *QueryRateLimitsByChannelOrClientIdRequest, opts ...grpc.CallOption) (*QueryRateLimitsByChannelOrClientIdResponse, error)
	// Queries all blacklisted denoms
	AllBlacklistedDenoms(ctx context.Context, in *QueryAllBlacklistedDenomsRequest, opts ...grpc.CallOption) (*QueryAllBlacklistedDenomsResponse, error)
	// Queries all whitelisted address pairs
	AllWhitelistedAddresses(ctx context.Context, in *QueryAllWhitelistedAddressesRequest, opts ...grpc.CallOption) (*QueryAllWhitelistedAddressesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) AllRateLimits(ctx context.Context, in *QueryAllRateLimitsRequest, opts ...grpc.CallOption) (*QueryAllRateLimitsResponse, error) {
	out := new(QueryAllRateLimitsResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.rate_limiting.v1.Query/AllRateLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RateLimit(ctx context.Context, in *QueryRateLimitRequest, opts ...grpc.CallOption) (*QueryRateLimitResponse, error) {
	out := new(QueryRateLimitResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.rate_limiting.v1.Query/RateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RateLimitsByChainId(ctx context.Context, in *QueryRateLimitsByChainIdRequest, opts ...grpc.CallOption) (*QueryRateLimitsByChainIdResponse, error) {
	out := new(QueryRateLimitsByChainIdResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.rate_limiting.v1.Query/RateLimitsByChainId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RateLimitsByChannelOrClientId(ctx context.Context, in *QueryRateLimitsByChannelOrClientIdRequest, opts ...grpc.CallOption) (*QueryRateLimitsByChannelOrClientIdResponse, error) {
	out := new(QueryRateLimitsByChannelOrClientIdResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.rate_limiting.v1.Query/RateLimitsByChannelOrClientId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllBlacklistedDenoms(ctx context.Context, in *QueryAllBlacklistedDenomsRequest, opts ...grpc.CallOption) (*QueryAllBlacklistedDenomsResponse, error) {
	out := new(QueryAllBlacklistedDenomsResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.rate_limiting.v1.Query/AllBlacklistedDenoms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllWhitelistedAddresses(ctx context.Context, in *QueryAllWhitelistedAddressesRequest, opts ...grpc.CallOption) (*QueryAllWhitelistedAddressesResponse, error) {
	out := new(QueryAllWhitelistedAddressesResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.rate_limiting.v1.Query/AllWhitelistedAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries all rate limits
	AllRateLimits(context.Context, *QueryAllRateLimitsRequest) (*QueryAllRateLimitsResponse, error)
	// Queries a specific rate limit by channel ID and denom
	// Ex:
	//  - /ratelimit/{channel_or_client_id}/by_denom?denom={denom}
	RateLimit(context.Context, *QueryRateLimitRequest) (*QueryRateLimitResponse, error)
	// Queries all the rate limits for a given chain
	RateLimitsByChainId(context.Context, *QueryRateLimitsByChainIdRequest) (*QueryRateLimitsByChainIdResponse, error)
	// Queries all the rate limits for a given channel ID
	RateLimitsByChannelOrClientId(context.Context, *QueryRateLimitsByChannelOrClientIdRequest) (*QueryRateLimitsByChannelOrClientIdResponse, error)
	// Queries all blacklisted denoms
	AllBlacklistedDenoms(context.Context, *QueryAllBlacklistedDenomsRequest) (*QueryAllBlacklistedDenomsResponse, error)
	// Queries all whitelisted address pairs
	AllWhitelistedAddresses(context.Context, *QueryAllWhitelistedAddressesRequest) (*QueryAllWhitelistedAddressesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) AllRateLimits(ctx context.Context, req *QueryAllRateLimitsRequest) (*QueryAllRateLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllRateLimits not implemented")
}
func (*UnimplementedQueryServer) RateLimit(ctx context.Context, req *QueryRateLimitRequest) (*QueryRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateLimit not implemented")
}
func (*UnimplementedQueryServer) RateLimitsByChainId(ctx context.Context, req *QueryRateLimitsByChainIdRequest) (*QueryRateLimitsByChainIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateLimitsByChainId not implemented")
}
func (*UnimplementedQueryServer) RateLimitsByChannelOrClientId(ctx context.Context, req *QueryRateLimitsByChannelOrClientIdRequest) (*QueryRateLimitsByChannelOrClientIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateLimitsByChannelOrClientId not implemented")
}
func (*UnimplementedQueryServer) AllBlacklistedDenoms(ctx context.Context, req *QueryAllBlacklistedDenomsRequest) (*QueryAllBlacklistedDenomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllBlacklistedDenoms not implemented")
}
func (*UnimplementedQueryServer) AllWhitelistedAddresses(ctx context.Context, req *QueryAllWhitelistedAddressesRequest) (*QueryAllWhitelistedAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllWhitelistedAddresses not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_AllRateLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRateLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllRateLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.rate_limiting.v1.Query/AllRateLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllRateLimits(ctx, req.(*QueryAllRateLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.rate_limiting.v1.Query/RateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RateLimit(ctx, req.(*QueryRateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RateLimitsByChainId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRateLimitsByChainIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RateLimitsByChainId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.rate_limiting.v1.Query/RateLimitsByChainId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RateLimitsByChainId(ctx, req.(*QueryRateLimitsByChainIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RateLimitsByChannelOrClientId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRateLimitsByChannelOrClientIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RateLimitsByChannelOrClientId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.rate_limiting.v1.Query/RateLimitsByChannelOrClientId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RateLimitsByChannelOrClientId(ctx, req.(*QueryRateLimitsByChannelOrClientIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllBlacklistedDenoms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBlacklistedDenomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllBlacklistedDenoms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.rate_limiting.v1.Query/AllBlacklistedDenoms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllBlacklistedDenoms(ctx, req.(*QueryAllBlacklistedDenomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllWhitelistedAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllWhitelistedAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllWhitelistedAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.rate_limiting.v1.Query/AllWhitelistedAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllWhitelistedAddresses(ctx, req.(*QueryAllWhitelistedAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.applications.rate_limiting.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllRateLimits",
			Handler:    _Query_AllRateLimits_Handler,
		},
		{
			MethodName: "RateLimit",
			Handler:    _Query_RateLimit_Handler,
		},
		{
			MethodName: "RateLimitsByChainId",
			Handler:    _Query_RateLimitsByChainId_Handler,
		},
		{
			MethodName: "RateLimitsByChannelOrClientId",
			Handler:    _Query_RateLimitsByChannelOrClientId_Handler,
		},
		{
			MethodName: "AllBlacklistedDenoms",
			Handler:    _Query_AllBlacklistedDenoms_Handler,
		},
		{
			MethodName: "AllWhitelistedAddresses",
			Handler:    _Query_AllWhitelistedAddresses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/applications/rate_limiting/v1/query.proto",
}

func (m *QueryAllRateLimitsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRateLimitsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRateLimitsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllRateLimitsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRateLimitsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRateLimitsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RateLimits) > 0 {
		for iNdEx := len(m.RateLimits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateLimits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateLimitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelOrClientId) > 0 {
		i -= len(m.ChannelOrClientId)
		copy(dAtA[i:], m.ChannelOrClientId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChannelOrClientId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateLimit != nil {
		{
			size, err := m.RateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateLimitsByChainIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimitsByChainIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimitsByChainIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateLimitsByChainIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimitsByChainIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimitsByChainIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RateLimits) > 0 {
		for iNdEx := len(m.RateLimits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateLimits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateLimitsByChannelOrClientIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimitsByChannelOrClientIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimitsByChannelOrClientIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelOrClientId) > 0 {
		i -= len(m.ChannelOrClientId)
		copy(dAtA[i:], m.ChannelOrClientId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChannelOrClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateLimitsByChannelOrClientIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimitsByChannelOrClientIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimitsByChannelOrClientIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RateLimits) > 0 {
		for iNdEx := len(m.RateLimits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateLimits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBlacklistedDenomsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlacklistedDenomsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlacklistedDenomsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllBlacklistedDenomsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlacklistedDenomsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlacklistedDenomsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Denoms[iNdEx])
			copy(dAtA[i:], m.Denoms[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Denoms[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllWhitelistedAddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllWhitelistedAddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllWhitelistedAddressesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllWhitelistedAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllWhitelistedAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllWhitelistedAddressesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AddressPairs) > 0 {
		for iNdEx := len(m.AddressPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddressPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAllRateLimitsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllRateLimitsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RateLimits) > 0 {
		for _, e := range m.RateLimits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRateLimitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ChannelOrClientId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRateLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRateLimitsByChainIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRateLimitsByChainIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RateLimits) > 0 {
		for _, e := range m.RateLimits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRateLimitsByChannelOrClientIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelOrClientId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRateLimitsByChannelOrClientIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RateLimits) > 0 {
		for _, e := range m.RateLimits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllBlacklistedDenomsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllBlacklistedDenomsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for _, s := range m.Denoms {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllWhitelistedAddressesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllWhitelistedAddressesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AddressPairs) > 0 {
		for _, e := range m.AddressPairs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAllRateLimitsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRateLimitsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRateLimitsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRateLimitsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRateLimitsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRateLimitsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimits = append(m.RateLimits, RateLimit{})
			if err := m.RateLimits[len(m.RateLimits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelOrClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelOrClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateLimit == nil {
				m.RateLimit = &RateLimit{}
			}
			if err := m.RateLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimitsByChainIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimitsByChainIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimitsByChainIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimitsByChainIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimitsByChainIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimitsByChainIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimits = append(m.RateLimits, RateLimit{})
			if err := m.RateLimits[len(m.RateLimits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimitsByChannelOrClientIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimitsByChannelOrClientIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimitsByChannelOrClientIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelOrClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelOrClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimitsByChannelOrClientIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimitsByChannelOrClientIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimitsByChannelOrClientIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimits = append(m.RateLimits, RateLimit{})
			if err := m.RateLimits[len(m.RateLimits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlacklistedDenomsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlacklistedDenomsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlacklistedDenomsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlacklistedDenomsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlacklistedDenomsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlacklistedDenomsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllWhitelistedAddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllWhitelistedAddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllWhitelistedAddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllWhitelistedAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllWhitelistedAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllWhitelistedAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressPairs = append(m.AddressPairs, WhitelistedAddressPair{})
			if err := m.AddressPairs[len(m.AddressPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
