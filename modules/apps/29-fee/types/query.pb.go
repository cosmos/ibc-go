// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/fee/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/ibc-go/v8/modules/core/04-channel/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryIncentivizedPacketsRequest defines the request type for the IncentivizedPackets rpc
type QueryIncentivizedPacketsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// block height at which to query
	QueryHeight uint64 `protobuf:"varint,2,opt,name=query_height,json=queryHeight,proto3" json:"query_height,omitempty"`
}

func (m *QueryIncentivizedPacketsRequest) Reset()         { *m = QueryIncentivizedPacketsRequest{} }
func (m *QueryIncentivizedPacketsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIncentivizedPacketsRequest) ProtoMessage()    {}
func (*QueryIncentivizedPacketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{0}
}
func (m *QueryIncentivizedPacketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivizedPacketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivizedPacketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivizedPacketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivizedPacketsRequest.Merge(m, src)
}
func (m *QueryIncentivizedPacketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivizedPacketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivizedPacketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivizedPacketsRequest proto.InternalMessageInfo

func (m *QueryIncentivizedPacketsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryIncentivizedPacketsRequest) GetQueryHeight() uint64 {
	if m != nil {
		return m.QueryHeight
	}
	return 0
}

// QueryIncentivizedPacketsResponse defines the response type for the IncentivizedPackets rpc
type QueryIncentivizedPacketsResponse struct {
	// list of identified fees for incentivized packets
	IncentivizedPackets []IdentifiedPacketFees `protobuf:"bytes,1,rep,name=incentivized_packets,json=incentivizedPackets,proto3" json:"incentivized_packets"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryIncentivizedPacketsResponse) Reset()         { *m = QueryIncentivizedPacketsResponse{} }
func (m *QueryIncentivizedPacketsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIncentivizedPacketsResponse) ProtoMessage()    {}
func (*QueryIncentivizedPacketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{1}
}
func (m *QueryIncentivizedPacketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivizedPacketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivizedPacketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivizedPacketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivizedPacketsResponse.Merge(m, src)
}
func (m *QueryIncentivizedPacketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivizedPacketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivizedPacketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivizedPacketsResponse proto.InternalMessageInfo

func (m *QueryIncentivizedPacketsResponse) GetIncentivizedPackets() []IdentifiedPacketFees {
	if m != nil {
		return m.IncentivizedPackets
	}
	return nil
}

func (m *QueryIncentivizedPacketsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryIncentivizedPacketRequest defines the request type for the IncentivizedPacket rpc
type QueryIncentivizedPacketRequest struct {
	// unique packet identifier comprised of channel ID, port ID and sequence
	PacketId types.PacketId `protobuf:"bytes,1,opt,name=packet_id,json=packetId,proto3" json:"packet_id"`
	// block height at which to query
	QueryHeight uint64 `protobuf:"varint,2,opt,name=query_height,json=queryHeight,proto3" json:"query_height,omitempty"`
}

func (m *QueryIncentivizedPacketRequest) Reset()         { *m = QueryIncentivizedPacketRequest{} }
func (m *QueryIncentivizedPacketRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIncentivizedPacketRequest) ProtoMessage()    {}
func (*QueryIncentivizedPacketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{2}
}
func (m *QueryIncentivizedPacketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivizedPacketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivizedPacketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivizedPacketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivizedPacketRequest.Merge(m, src)
}
func (m *QueryIncentivizedPacketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivizedPacketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivizedPacketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivizedPacketRequest proto.InternalMessageInfo

func (m *QueryIncentivizedPacketRequest) GetPacketId() types.PacketId {
	if m != nil {
		return m.PacketId
	}
	return types.PacketId{}
}

func (m *QueryIncentivizedPacketRequest) GetQueryHeight() uint64 {
	if m != nil {
		return m.QueryHeight
	}
	return 0
}

// QueryIncentivizedPacketsResponse defines the response type for the IncentivizedPacket rpc
type QueryIncentivizedPacketResponse struct {
	// the identified fees for the incentivized packet
	IncentivizedPacket IdentifiedPacketFees `protobuf:"bytes,1,opt,name=incentivized_packet,json=incentivizedPacket,proto3" json:"incentivized_packet"`
}

func (m *QueryIncentivizedPacketResponse) Reset()         { *m = QueryIncentivizedPacketResponse{} }
func (m *QueryIncentivizedPacketResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIncentivizedPacketResponse) ProtoMessage()    {}
func (*QueryIncentivizedPacketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{3}
}
func (m *QueryIncentivizedPacketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivizedPacketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivizedPacketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivizedPacketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivizedPacketResponse.Merge(m, src)
}
func (m *QueryIncentivizedPacketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivizedPacketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivizedPacketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivizedPacketResponse proto.InternalMessageInfo

func (m *QueryIncentivizedPacketResponse) GetIncentivizedPacket() IdentifiedPacketFees {
	if m != nil {
		return m.IncentivizedPacket
	}
	return IdentifiedPacketFees{}
}

// QueryIncentivizedPacketsForChannelRequest defines the request type for querying for all incentivized packets
// for a specific channel
type QueryIncentivizedPacketsForChannelRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	PortId     string             `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId  string             `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Height to query at
	QueryHeight uint64 `protobuf:"varint,4,opt,name=query_height,json=queryHeight,proto3" json:"query_height,omitempty"`
}

func (m *QueryIncentivizedPacketsForChannelRequest) Reset() {
	*m = QueryIncentivizedPacketsForChannelRequest{}
}
func (m *QueryIncentivizedPacketsForChannelRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryIncentivizedPacketsForChannelRequest) ProtoMessage() {}
func (*QueryIncentivizedPacketsForChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{4}
}
func (m *QueryIncentivizedPacketsForChannelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivizedPacketsForChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivizedPacketsForChannelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivizedPacketsForChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivizedPacketsForChannelRequest.Merge(m, src)
}
func (m *QueryIncentivizedPacketsForChannelRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivizedPacketsForChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivizedPacketsForChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivizedPacketsForChannelRequest proto.InternalMessageInfo

func (m *QueryIncentivizedPacketsForChannelRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryIncentivizedPacketsForChannelRequest) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *QueryIncentivizedPacketsForChannelRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *QueryIncentivizedPacketsForChannelRequest) GetQueryHeight() uint64 {
	if m != nil {
		return m.QueryHeight
	}
	return 0
}

// QueryIncentivizedPacketsResponse defines the response type for the incentivized packets RPC
type QueryIncentivizedPacketsForChannelResponse struct {
	// Map of all incentivized_packets
	IncentivizedPackets []*IdentifiedPacketFees `protobuf:"bytes,1,rep,name=incentivized_packets,json=incentivizedPackets,proto3" json:"incentivized_packets,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryIncentivizedPacketsForChannelResponse) Reset() {
	*m = QueryIncentivizedPacketsForChannelResponse{}
}
func (m *QueryIncentivizedPacketsForChannelResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryIncentivizedPacketsForChannelResponse) ProtoMessage() {}
func (*QueryIncentivizedPacketsForChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{5}
}
func (m *QueryIncentivizedPacketsForChannelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivizedPacketsForChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivizedPacketsForChannelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivizedPacketsForChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivizedPacketsForChannelResponse.Merge(m, src)
}
func (m *QueryIncentivizedPacketsForChannelResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivizedPacketsForChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivizedPacketsForChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivizedPacketsForChannelResponse proto.InternalMessageInfo

func (m *QueryIncentivizedPacketsForChannelResponse) GetIncentivizedPackets() []*IdentifiedPacketFees {
	if m != nil {
		return m.IncentivizedPackets
	}
	return nil
}

func (m *QueryIncentivizedPacketsForChannelResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTotalRecvFeesRequest defines the request type for the TotalRecvFees rpc
type QueryTotalRecvFeesRequest struct {
	// the packet identifier for the associated fees
	PacketId types.PacketId `protobuf:"bytes,1,opt,name=packet_id,json=packetId,proto3" json:"packet_id"`
}

func (m *QueryTotalRecvFeesRequest) Reset()         { *m = QueryTotalRecvFeesRequest{} }
func (m *QueryTotalRecvFeesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalRecvFeesRequest) ProtoMessage()    {}
func (*QueryTotalRecvFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{6}
}
func (m *QueryTotalRecvFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalRecvFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalRecvFeesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalRecvFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalRecvFeesRequest.Merge(m, src)
}
func (m *QueryTotalRecvFeesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalRecvFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalRecvFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalRecvFeesRequest proto.InternalMessageInfo

func (m *QueryTotalRecvFeesRequest) GetPacketId() types.PacketId {
	if m != nil {
		return m.PacketId
	}
	return types.PacketId{}
}

// QueryTotalRecvFeesResponse defines the response type for the TotalRecvFees rpc
type QueryTotalRecvFeesResponse struct {
	// the total packet receive fees
	RecvFees github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=recv_fees,json=recvFees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"recv_fees"`
}

func (m *QueryTotalRecvFeesResponse) Reset()         { *m = QueryTotalRecvFeesResponse{} }
func (m *QueryTotalRecvFeesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalRecvFeesResponse) ProtoMessage()    {}
func (*QueryTotalRecvFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{7}
}
func (m *QueryTotalRecvFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalRecvFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalRecvFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalRecvFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalRecvFeesResponse.Merge(m, src)
}
func (m *QueryTotalRecvFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalRecvFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalRecvFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalRecvFeesResponse proto.InternalMessageInfo

func (m *QueryTotalRecvFeesResponse) GetRecvFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.RecvFees
	}
	return nil
}

// QueryTotalAckFeesRequest defines the request type for the TotalAckFees rpc
type QueryTotalAckFeesRequest struct {
	// the packet identifier for the associated fees
	PacketId types.PacketId `protobuf:"bytes,1,opt,name=packet_id,json=packetId,proto3" json:"packet_id"`
}

func (m *QueryTotalAckFeesRequest) Reset()         { *m = QueryTotalAckFeesRequest{} }
func (m *QueryTotalAckFeesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalAckFeesRequest) ProtoMessage()    {}
func (*QueryTotalAckFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{8}
}
func (m *QueryTotalAckFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalAckFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalAckFeesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalAckFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalAckFeesRequest.Merge(m, src)
}
func (m *QueryTotalAckFeesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalAckFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalAckFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalAckFeesRequest proto.InternalMessageInfo

func (m *QueryTotalAckFeesRequest) GetPacketId() types.PacketId {
	if m != nil {
		return m.PacketId
	}
	return types.PacketId{}
}

// QueryTotalAckFeesResponse defines the response type for the TotalAckFees rpc
type QueryTotalAckFeesResponse struct {
	// the total packet acknowledgement fees
	AckFees github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=ack_fees,json=ackFees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"ack_fees"`
}

func (m *QueryTotalAckFeesResponse) Reset()         { *m = QueryTotalAckFeesResponse{} }
func (m *QueryTotalAckFeesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalAckFeesResponse) ProtoMessage()    {}
func (*QueryTotalAckFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{9}
}
func (m *QueryTotalAckFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalAckFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalAckFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalAckFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalAckFeesResponse.Merge(m, src)
}
func (m *QueryTotalAckFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalAckFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalAckFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalAckFeesResponse proto.InternalMessageInfo

func (m *QueryTotalAckFeesResponse) GetAckFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.AckFees
	}
	return nil
}

// QueryTotalTimeoutFeesRequest defines the request type for the TotalTimeoutFees rpc
type QueryTotalTimeoutFeesRequest struct {
	// the packet identifier for the associated fees
	PacketId types.PacketId `protobuf:"bytes,1,opt,name=packet_id,json=packetId,proto3" json:"packet_id"`
}

func (m *QueryTotalTimeoutFeesRequest) Reset()         { *m = QueryTotalTimeoutFeesRequest{} }
func (m *QueryTotalTimeoutFeesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalTimeoutFeesRequest) ProtoMessage()    {}
func (*QueryTotalTimeoutFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{10}
}
func (m *QueryTotalTimeoutFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalTimeoutFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalTimeoutFeesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalTimeoutFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalTimeoutFeesRequest.Merge(m, src)
}
func (m *QueryTotalTimeoutFeesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalTimeoutFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalTimeoutFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalTimeoutFeesRequest proto.InternalMessageInfo

func (m *QueryTotalTimeoutFeesRequest) GetPacketId() types.PacketId {
	if m != nil {
		return m.PacketId
	}
	return types.PacketId{}
}

// QueryTotalTimeoutFeesResponse defines the response type for the TotalTimeoutFees rpc
type QueryTotalTimeoutFeesResponse struct {
	// the total packet timeout fees
	TimeoutFees github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=timeout_fees,json=timeoutFees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"timeout_fees"`
}

func (m *QueryTotalTimeoutFeesResponse) Reset()         { *m = QueryTotalTimeoutFeesResponse{} }
func (m *QueryTotalTimeoutFeesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalTimeoutFeesResponse) ProtoMessage()    {}
func (*QueryTotalTimeoutFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{11}
}
func (m *QueryTotalTimeoutFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalTimeoutFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalTimeoutFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalTimeoutFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalTimeoutFeesResponse.Merge(m, src)
}
func (m *QueryTotalTimeoutFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalTimeoutFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalTimeoutFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalTimeoutFeesResponse proto.InternalMessageInfo

func (m *QueryTotalTimeoutFeesResponse) GetTimeoutFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TimeoutFees
	}
	return nil
}

// QueryPayeeRequest defines the request type for the Payee rpc
type QueryPayeeRequest struct {
	// unique channel identifier
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// the relayer address to which the distribution address is registered
	Relayer string `protobuf:"bytes,2,opt,name=relayer,proto3" json:"relayer,omitempty"`
}

func (m *QueryPayeeRequest) Reset()         { *m = QueryPayeeRequest{} }
func (m *QueryPayeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPayeeRequest) ProtoMessage()    {}
func (*QueryPayeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{12}
}
func (m *QueryPayeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPayeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPayeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPayeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPayeeRequest.Merge(m, src)
}
func (m *QueryPayeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPayeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPayeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPayeeRequest proto.InternalMessageInfo

func (m *QueryPayeeRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *QueryPayeeRequest) GetRelayer() string {
	if m != nil {
		return m.Relayer
	}
	return ""
}

// QueryPayeeResponse defines the response type for the Payee rpc
type QueryPayeeResponse struct {
	// the payee address to which packet fees are paid out
	PayeeAddress string `protobuf:"bytes,1,opt,name=payee_address,json=payeeAddress,proto3" json:"payee_address,omitempty"`
}

func (m *QueryPayeeResponse) Reset()         { *m = QueryPayeeResponse{} }
func (m *QueryPayeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPayeeResponse) ProtoMessage()    {}
func (*QueryPayeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{13}
}
func (m *QueryPayeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPayeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPayeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPayeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPayeeResponse.Merge(m, src)
}
func (m *QueryPayeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPayeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPayeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPayeeResponse proto.InternalMessageInfo

func (m *QueryPayeeResponse) GetPayeeAddress() string {
	if m != nil {
		return m.PayeeAddress
	}
	return ""
}

// QueryCounterpartyPayeeRequest defines the request type for the CounterpartyPayee rpc
type QueryCounterpartyPayeeRequest struct {
	// unique channel identifier
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// the relayer address to which the counterparty is registered
	Relayer string `protobuf:"bytes,2,opt,name=relayer,proto3" json:"relayer,omitempty"`
}

func (m *QueryCounterpartyPayeeRequest) Reset()         { *m = QueryCounterpartyPayeeRequest{} }
func (m *QueryCounterpartyPayeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCounterpartyPayeeRequest) ProtoMessage()    {}
func (*QueryCounterpartyPayeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{14}
}
func (m *QueryCounterpartyPayeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCounterpartyPayeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCounterpartyPayeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCounterpartyPayeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCounterpartyPayeeRequest.Merge(m, src)
}
func (m *QueryCounterpartyPayeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCounterpartyPayeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCounterpartyPayeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCounterpartyPayeeRequest proto.InternalMessageInfo

func (m *QueryCounterpartyPayeeRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *QueryCounterpartyPayeeRequest) GetRelayer() string {
	if m != nil {
		return m.Relayer
	}
	return ""
}

// QueryCounterpartyPayeeResponse defines the response type for the CounterpartyPayee rpc
type QueryCounterpartyPayeeResponse struct {
	// the counterparty payee address used to compensate forward relaying
	CounterpartyPayee string `protobuf:"bytes,1,opt,name=counterparty_payee,json=counterpartyPayee,proto3" json:"counterparty_payee,omitempty"`
}

func (m *QueryCounterpartyPayeeResponse) Reset()         { *m = QueryCounterpartyPayeeResponse{} }
func (m *QueryCounterpartyPayeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCounterpartyPayeeResponse) ProtoMessage()    {}
func (*QueryCounterpartyPayeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{15}
}
func (m *QueryCounterpartyPayeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCounterpartyPayeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCounterpartyPayeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCounterpartyPayeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCounterpartyPayeeResponse.Merge(m, src)
}
func (m *QueryCounterpartyPayeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCounterpartyPayeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCounterpartyPayeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCounterpartyPayeeResponse proto.InternalMessageInfo

func (m *QueryCounterpartyPayeeResponse) GetCounterpartyPayee() string {
	if m != nil {
		return m.CounterpartyPayee
	}
	return ""
}

// QueryFeeEnabledChannelsRequest defines the request type for the FeeEnabledChannels rpc
type QueryFeeEnabledChannelsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// block height at which to query
	QueryHeight uint64 `protobuf:"varint,2,opt,name=query_height,json=queryHeight,proto3" json:"query_height,omitempty"`
}

func (m *QueryFeeEnabledChannelsRequest) Reset()         { *m = QueryFeeEnabledChannelsRequest{} }
func (m *QueryFeeEnabledChannelsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeEnabledChannelsRequest) ProtoMessage()    {}
func (*QueryFeeEnabledChannelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{16}
}
func (m *QueryFeeEnabledChannelsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeEnabledChannelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeEnabledChannelsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeEnabledChannelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeEnabledChannelsRequest.Merge(m, src)
}
func (m *QueryFeeEnabledChannelsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeEnabledChannelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeEnabledChannelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeEnabledChannelsRequest proto.InternalMessageInfo

func (m *QueryFeeEnabledChannelsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryFeeEnabledChannelsRequest) GetQueryHeight() uint64 {
	if m != nil {
		return m.QueryHeight
	}
	return 0
}

// QueryFeeEnabledChannelsResponse defines the response type for the FeeEnabledChannels rpc
type QueryFeeEnabledChannelsResponse struct {
	// list of fee enabled channels
	FeeEnabledChannels []FeeEnabledChannel `protobuf:"bytes,1,rep,name=fee_enabled_channels,json=feeEnabledChannels,proto3" json:"fee_enabled_channels"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFeeEnabledChannelsResponse) Reset()         { *m = QueryFeeEnabledChannelsResponse{} }
func (m *QueryFeeEnabledChannelsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeEnabledChannelsResponse) ProtoMessage()    {}
func (*QueryFeeEnabledChannelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{17}
}
func (m *QueryFeeEnabledChannelsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeEnabledChannelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeEnabledChannelsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeEnabledChannelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeEnabledChannelsResponse.Merge(m, src)
}
func (m *QueryFeeEnabledChannelsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeEnabledChannelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeEnabledChannelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeEnabledChannelsResponse proto.InternalMessageInfo

func (m *QueryFeeEnabledChannelsResponse) GetFeeEnabledChannels() []FeeEnabledChannel {
	if m != nil {
		return m.FeeEnabledChannels
	}
	return nil
}

func (m *QueryFeeEnabledChannelsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryFeeEnabledChannelRequest defines the request type for the FeeEnabledChannel rpc
type QueryFeeEnabledChannelRequest struct {
	// unique port identifier
	PortId string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	// unique channel identifier
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *QueryFeeEnabledChannelRequest) Reset()         { *m = QueryFeeEnabledChannelRequest{} }
func (m *QueryFeeEnabledChannelRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeEnabledChannelRequest) ProtoMessage()    {}
func (*QueryFeeEnabledChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{18}
}
func (m *QueryFeeEnabledChannelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeEnabledChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeEnabledChannelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeEnabledChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeEnabledChannelRequest.Merge(m, src)
}
func (m *QueryFeeEnabledChannelRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeEnabledChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeEnabledChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeEnabledChannelRequest proto.InternalMessageInfo

func (m *QueryFeeEnabledChannelRequest) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *QueryFeeEnabledChannelRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

// QueryFeeEnabledChannelResponse defines the response type for the FeeEnabledChannel rpc
type QueryFeeEnabledChannelResponse struct {
	// boolean flag representing the fee enabled channel status
	FeeEnabled bool `protobuf:"varint,1,opt,name=fee_enabled,json=feeEnabled,proto3" json:"fee_enabled,omitempty"`
}

func (m *QueryFeeEnabledChannelResponse) Reset()         { *m = QueryFeeEnabledChannelResponse{} }
func (m *QueryFeeEnabledChannelResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeEnabledChannelResponse) ProtoMessage()    {}
func (*QueryFeeEnabledChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{19}
}
func (m *QueryFeeEnabledChannelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeEnabledChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeEnabledChannelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeEnabledChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeEnabledChannelResponse.Merge(m, src)
}
func (m *QueryFeeEnabledChannelResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeEnabledChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeEnabledChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeEnabledChannelResponse proto.InternalMessageInfo

func (m *QueryFeeEnabledChannelResponse) GetFeeEnabled() bool {
	if m != nil {
		return m.FeeEnabled
	}
	return false
}

func init() {
	proto.RegisterType((*QueryIncentivizedPacketsRequest)(nil), "ibc.applications.fee.v1.QueryIncentivizedPacketsRequest")
	proto.RegisterType((*QueryIncentivizedPacketsResponse)(nil), "ibc.applications.fee.v1.QueryIncentivizedPacketsResponse")
	proto.RegisterType((*QueryIncentivizedPacketRequest)(nil), "ibc.applications.fee.v1.QueryIncentivizedPacketRequest")
	proto.RegisterType((*QueryIncentivizedPacketResponse)(nil), "ibc.applications.fee.v1.QueryIncentivizedPacketResponse")
	proto.RegisterType((*QueryIncentivizedPacketsForChannelRequest)(nil), "ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest")
	proto.RegisterType((*QueryIncentivizedPacketsForChannelResponse)(nil), "ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse")
	proto.RegisterType((*QueryTotalRecvFeesRequest)(nil), "ibc.applications.fee.v1.QueryTotalRecvFeesRequest")
	proto.RegisterType((*QueryTotalRecvFeesResponse)(nil), "ibc.applications.fee.v1.QueryTotalRecvFeesResponse")
	proto.RegisterType((*QueryTotalAckFeesRequest)(nil), "ibc.applications.fee.v1.QueryTotalAckFeesRequest")
	proto.RegisterType((*QueryTotalAckFeesResponse)(nil), "ibc.applications.fee.v1.QueryTotalAckFeesResponse")
	proto.RegisterType((*QueryTotalTimeoutFeesRequest)(nil), "ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest")
	proto.RegisterType((*QueryTotalTimeoutFeesResponse)(nil), "ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse")
	proto.RegisterType((*QueryPayeeRequest)(nil), "ibc.applications.fee.v1.QueryPayeeRequest")
	proto.RegisterType((*QueryPayeeResponse)(nil), "ibc.applications.fee.v1.QueryPayeeResponse")
	proto.RegisterType((*QueryCounterpartyPayeeRequest)(nil), "ibc.applications.fee.v1.QueryCounterpartyPayeeRequest")
	proto.RegisterType((*QueryCounterpartyPayeeResponse)(nil), "ibc.applications.fee.v1.QueryCounterpartyPayeeResponse")
	proto.RegisterType((*QueryFeeEnabledChannelsRequest)(nil), "ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest")
	proto.RegisterType((*QueryFeeEnabledChannelsResponse)(nil), "ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse")
	proto.RegisterType((*QueryFeeEnabledChannelRequest)(nil), "ibc.applications.fee.v1.QueryFeeEnabledChannelRequest")
	proto.RegisterType((*QueryFeeEnabledChannelResponse)(nil), "ibc.applications.fee.v1.QueryFeeEnabledChannelResponse")
}

func init() {
	proto.RegisterFile("ibc/applications/fee/v1/query.proto", fileDescriptor_0638a8a78ca2503c)
}

var fileDescriptor_0638a8a78ca2503c = []byte{
	// 1250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x6f, 0x4f, 0x1c, 0x45,
	0x18, 0x67, 0xae, 0xb4, 0xc0, 0x03, 0x4d, 0x64, 0x20, 0x29, 0xdd, 0xc0, 0x41, 0xb7, 0xd6, 0x22,
	0xe6, 0x76, 0xe5, 0x9a, 0x0a, 0xbc, 0x52, 0x40, 0xa9, 0x68, 0xb5, 0x78, 0x92, 0x68, 0x8c, 0xe6,
	0xba, 0xb7, 0x3b, 0xb7, 0x6c, 0x38, 0x76, 0xb6, 0xbb, 0x7b, 0x17, 0x29, 0xe2, 0xff, 0xaa, 0x89,
	0x26, 0x35, 0xf1, 0x53, 0x68, 0xe2, 0x07, 0xf0, 0x1b, 0xf4, 0x55, 0x43, 0xd2, 0x17, 0x1a, 0x5f,
	0xa8, 0x01, 0xe3, 0x67, 0xf0, 0x85, 0x26, 0x66, 0x67, 0x66, 0xef, 0xf6, 0xd8, 0x5d, 0xee, 0x0e,
	0x0f, 0xfa, 0x8a, 0xdd, 0x99, 0x79, 0x9e, 0xe7, 0xf7, 0xfb, 0xcd, 0xec, 0x3c, 0xbf, 0x03, 0x2e,
	0x5b, 0x25, 0x5d, 0xd5, 0x1c, 0xa7, 0x62, 0xe9, 0x9a, 0x6f, 0x51, 0xdb, 0x53, 0xcb, 0x84, 0xa8,
	0xb5, 0x59, 0xf5, 0x4e, 0x95, 0xb8, 0xdb, 0x8a, 0xe3, 0x52, 0x9f, 0xe2, 0x0b, 0x56, 0x49, 0x57,
	0xa2, 0x8b, 0x94, 0x32, 0x21, 0x4a, 0x6d, 0x56, 0x1a, 0x35, 0xa9, 0x49, 0xd9, 0x1a, 0x35, 0x78,
	0xe2, 0xcb, 0xa5, 0x71, 0x93, 0x52, 0xb3, 0x42, 0x54, 0xcd, 0xb1, 0x54, 0xcd, 0xb6, 0xa9, 0x2f,
	0x82, 0xf8, 0x6c, 0x56, 0xa7, 0xde, 0x16, 0xf5, 0xd4, 0x92, 0xe6, 0x05, 0x85, 0x4a, 0xc4, 0xd7,
	0x66, 0x55, 0x9d, 0x5a, 0xb6, 0x98, 0x9f, 0x89, 0xce, 0x33, 0x14, 0xf5, 0x55, 0x8e, 0x66, 0x5a,
	0x36, 0x4b, 0x26, 0xd6, 0x5e, 0x4a, 0x43, 0x1f, 0xe0, 0xe3, 0x4b, 0xae, 0xa4, 0x2d, 0x31, 0x89,
	0x4d, 0x3c, 0xcb, 0x8b, 0x66, 0xd2, 0xa9, 0x4b, 0x54, 0x7d, 0x43, 0xb3, 0x6d, 0x52, 0x09, 0x96,
	0x88, 0x47, 0xbe, 0x44, 0xfe, 0x06, 0xc1, 0xe4, 0x1b, 0x01, 0x9e, 0x55, 0x5b, 0x27, 0xb6, 0x6f,
	0xd5, 0xac, 0xbb, 0xc4, 0x58, 0xd3, 0xf4, 0x4d, 0xe2, 0x7b, 0x05, 0x72, 0xa7, 0x4a, 0x3c, 0x1f,
	0xaf, 0x00, 0x34, 0x40, 0x8e, 0xa1, 0x29, 0x34, 0x3d, 0x98, 0x7f, 0x4a, 0xe1, 0x8c, 0x94, 0x80,
	0x91, 0xc2, 0x75, 0x15, 0x8c, 0x94, 0x35, 0xcd, 0x24, 0x22, 0xb6, 0x10, 0x89, 0xc4, 0x97, 0x60,
	0x88, 0x2d, 0x2c, 0x6e, 0x10, 0xcb, 0xdc, 0xf0, 0xc7, 0x32, 0x53, 0x68, 0xba, 0xb7, 0x30, 0xc8,
	0xc6, 0x5e, 0x66, 0x43, 0xf2, 0x23, 0x04, 0x53, 0xe9, 0x70, 0x3c, 0x87, 0xda, 0x1e, 0xc1, 0x65,
	0x18, 0xb5, 0x22, 0xd3, 0x45, 0x87, 0xcf, 0x8f, 0xa1, 0xa9, 0x33, 0xd3, 0x83, 0xf9, 0x9c, 0x92,
	0xb2, 0xb1, 0xca, 0xaa, 0x11, 0xc4, 0x94, 0xad, 0x30, 0xe3, 0x0a, 0x21, 0xde, 0x52, 0xef, 0x83,
	0xdf, 0x26, 0x7b, 0x0a, 0x23, 0x56, 0xbc, 0x1e, 0xbe, 0xd1, 0xc4, 0x3b, 0xc3, 0x78, 0x5f, 0x6d,
	0xc9, 0x9b, 0x83, 0x8c, 0x12, 0x97, 0xef, 0x21, 0xc8, 0xa6, 0xb0, 0x0a, 0x35, 0x7e, 0x01, 0x06,
	0x38, 0x8d, 0xa2, 0x65, 0x08, 0x89, 0x27, 0x18, 0x91, 0x60, 0xfb, 0x94, 0x70, 0xcf, 0x6a, 0x41,
	0x91, 0x60, 0xd5, 0xaa, 0x21, 0x80, 0xf7, 0x3b, 0xe2, 0xbd, 0x1d, 0x75, 0xbf, 0x4c, 0xdf, 0xec,
	0xba, 0xb8, 0x06, 0x8c, 0x24, 0x88, 0x2b, 0x20, 0x1d, 0x4b, 0x5b, 0x1c, 0xd7, 0x56, 0x7e, 0x88,
	0xe0, 0xe9, 0xb4, 0x7d, 0x5e, 0xa1, 0xee, 0x32, 0xe7, 0xdb, 0xed, 0x03, 0x78, 0x01, 0xfa, 0x1c,
	0xea, 0x32, 0x89, 0x03, 0x75, 0x06, 0x0a, 0xe7, 0x82, 0xd7, 0x55, 0x03, 0x4f, 0x00, 0x08, 0x89,
	0x83, 0xb9, 0x33, 0x6c, 0x6e, 0x40, 0x8c, 0x24, 0x48, 0xdb, 0x1b, 0x97, 0xf6, 0x67, 0x04, 0x33,
	0xed, 0x10, 0x12, 0x2a, 0xdf, 0xee, 0xe2, 0x11, 0x3e, 0xe1, 0xc3, 0xfb, 0x1e, 0x5c, 0x64, 0xc4,
	0xd6, 0xa9, 0xaf, 0x55, 0x0a, 0x44, 0xaf, 0xb1, 0x9a, 0xdd, 0x3a, 0xb6, 0xf2, 0x17, 0x08, 0xa4,
	0xa4, 0xfc, 0x42, 0xa8, 0x0d, 0x18, 0x70, 0x89, 0x5e, 0x2b, 0x96, 0x09, 0x09, 0xd5, 0xb9, 0xd8,
	0xc4, 0x22, 0xc4, 0xbf, 0x4c, 0x2d, 0x7b, 0xe9, 0xd9, 0x20, 0xf9, 0x0f, 0xbf, 0x4f, 0x4e, 0x9b,
	0x96, 0xbf, 0x51, 0x2d, 0x29, 0x3a, 0xdd, 0x52, 0xc5, 0xcd, 0xcb, 0xff, 0xe4, 0x3c, 0x63, 0x53,
	0xf5, 0xb7, 0x1d, 0xe2, 0xb1, 0x00, 0xaf, 0xd0, 0xef, 0x8a, 0x8a, 0xf2, 0xbb, 0x30, 0xd6, 0xc0,
	0xb1, 0xa8, 0x6f, 0x76, 0x97, 0xe6, 0x67, 0x28, 0x2a, 0x63, 0x3d, 0x7d, 0xfd, 0x46, 0xeb, 0xd7,
	0xf4, 0xcd, 0x13, 0x23, 0xd9, 0xa7, 0xf1, 0x7a, 0xf2, 0x6d, 0x18, 0x6f, 0x80, 0x58, 0xb7, 0xb6,
	0x08, 0xad, 0xfa, 0xdd, 0xe5, 0x79, 0x1f, 0xc1, 0x44, 0x4a, 0x09, 0xc1, 0xd5, 0x86, 0x21, 0x9f,
	0x0f, 0x9f, 0x18, 0xdf, 0x41, 0xbf, 0x51, 0x57, 0xbe, 0x09, 0xc3, 0x0c, 0xd0, 0x9a, 0xb6, 0x4d,
	0xc2, 0x5b, 0xe1, 0xd0, 0x07, 0x8f, 0x0e, 0x7f, 0xf0, 0x63, 0xd0, 0xe7, 0x92, 0x8a, 0xb6, 0x4d,
	0x5c, 0x71, 0x51, 0x84, 0xaf, 0xf2, 0x02, 0xe0, 0x68, 0x36, 0xc1, 0xe9, 0x32, 0x9c, 0x77, 0x82,
	0x81, 0xa2, 0x66, 0x18, 0x2e, 0xf1, 0x3c, 0x91, 0x71, 0x88, 0x0d, 0x2e, 0xf2, 0x31, 0xf9, 0x6d,
	0xa1, 0xcc, 0x32, 0xad, 0xda, 0x3e, 0x71, 0x1d, 0xcd, 0xf5, 0xbb, 0x04, 0xea, 0x96, 0x68, 0x2f,
	0x09, 0x99, 0x05, 0xc0, 0x1c, 0x60, 0x3d, 0x32, 0x59, 0x64, 0xc0, 0x44, 0x89, 0x61, 0xfd, 0x70,
	0x98, 0xfc, 0x75, 0xd8, 0xb0, 0x56, 0x08, 0x79, 0xc9, 0xd6, 0x4a, 0x15, 0x62, 0x88, 0x1b, 0xec,
	0x71, 0x98, 0x82, 0x87, 0x61, 0xdb, 0x4a, 0x42, 0x23, 0x08, 0x96, 0x60, 0xb4, 0x4c, 0x48, 0x91,
	0xf0, 0xe9, 0xa2, 0x50, 0x2d, 0x3c, 0x5d, 0x33, 0xa9, 0x17, 0x6a, 0x2c, 0x65, 0xd8, 0xb4, 0xca,
	0xb1, 0x5a, 0xdd, 0xbb, 0x52, 0xdf, 0x12, 0x27, 0x21, 0x56, 0x3c, 0x14, 0x37, 0xd2, 0xa8, 0xd0,
	0x11, 0x8d, 0x2a, 0x73, 0xe8, 0x88, 0xc8, 0x8b, 0x69, 0xdb, 0x56, 0xd7, 0x69, 0x12, 0x06, 0x23,
	0x3a, 0xb1, 0xec, 0xfd, 0x05, 0x68, 0x90, 0xcd, 0xff, 0x35, 0x0c, 0x67, 0x59, 0x0e, 0xfc, 0x13,
	0x82, 0x91, 0x84, 0x6e, 0x86, 0xe7, 0x53, 0xc5, 0x6c, 0x61, 0x24, 0xa5, 0x85, 0x63, 0x44, 0x72,
	0xdc, 0x72, 0xee, 0xd3, 0x47, 0x7f, 0x7e, 0x97, 0xb9, 0x8a, 0xaf, 0xa8, 0xc2, 0xfa, 0xd6, 0x2d,
	0x6f, 0x52, 0x1f, 0xc5, 0xf7, 0x33, 0x80, 0xe3, 0xe9, 0xf0, 0x5c, 0xa7, 0x00, 0x42, 0xe4, 0xf3,
	0x9d, 0x07, 0x0a, 0xe0, 0xf7, 0x10, 0x43, 0xfe, 0x11, 0xde, 0x8d, 0x21, 0x0f, 0x0f, 0xa9, 0xba,
	0x53, 0xbf, 0x74, 0x95, 0xc6, 0xee, 0xee, 0xaa, 0xc1, 0x9e, 0x37, 0x4d, 0x8a, 0x33, 0xb1, 0xab,
	0x7a, 0x01, 0x2c, 0x5b, 0x27, 0x4d, 0xb3, 0xe1, 0xe0, 0x6e, 0x92, 0x24, 0xf8, 0x5f, 0x04, 0x13,
	0x47, 0x7a, 0x13, 0xbc, 0xd4, 0xf1, 0xee, 0xc4, 0x9c, 0x9a, 0xb4, 0xfc, 0xbf, 0x72, 0x08, 0xc9,
	0xde, 0x64, 0x8a, 0xbd, 0x86, 0x5f, 0x3d, 0x42, 0xb1, 0x24, 0x9d, 0x42, 0x75, 0x12, 0x4f, 0xc4,
	0x3f, 0x08, 0xce, 0x37, 0x59, 0x0c, 0x9c, 0x3f, 0x1a, 0x6b, 0x92, 0xdf, 0x91, 0xae, 0x75, 0x14,
	0x23, 0xf8, 0x7c, 0xc2, 0x8f, 0xc0, 0x0e, 0xde, 0x3e, 0xbd, 0x23, 0xe0, 0x07, 0x48, 0x8a, 0x75,
	0xeb, 0x84, 0xff, 0x46, 0x30, 0x14, 0xb5, 0x1e, 0x78, 0xb6, 0x0d, 0x26, 0xcd, 0x2e, 0x48, 0xca,
	0x77, 0x12, 0x22, 0xb8, 0x7f, 0xcc, 0xb9, 0xdf, 0xc5, 0xef, 0x9f, 0x36, 0xf7, 0xd0, 0x50, 0xe1,
	0xaf, 0x32, 0xf0, 0xc4, 0x61, 0x37, 0x82, 0xaf, 0xb7, 0xc1, 0x25, 0x6e, 0x90, 0xa4, 0xe7, 0x3a,
	0x0d, 0x13, 0x32, 0x7c, 0xce, 0x65, 0xf8, 0x10, 0x7f, 0x70, 0xda, 0x32, 0x44, 0xbd, 0x16, 0xfe,
	0x1e, 0xc1, 0x59, 0xd6, 0xe1, 0xf1, 0xcc, 0xd1, 0x44, 0xa2, 0xbe, 0x44, 0x7a, 0xa6, 0xad, 0xb5,
	0x82, 0xe9, 0x0d, 0x46, 0x74, 0x11, 0x3f, 0xdf, 0xe6, 0xc7, 0x2b, 0x3c, 0x8c, 0xa7, 0xee, 0x88,
	0xa7, 0x5d, 0x95, 0x99, 0x13, 0xfc, 0x2b, 0x82, 0xe1, 0x98, 0xa1, 0xc1, 0x2d, 0x36, 0x20, 0xcd,
	0x5b, 0x49, 0x73, 0x1d, 0xc7, 0x09, 0x3e, 0xeb, 0x8c, 0xcf, 0xeb, 0xf8, 0xe6, 0xf1, 0xf9, 0xc4,
	0x9d, 0x17, 0xfe, 0x11, 0x01, 0x8e, 0xbb, 0x99, 0x56, 0xfd, 0x29, 0xd5, 0x8d, 0xb5, 0xea, 0x4f,
	0xe9, 0xc6, 0x49, 0x7e, 0x92, 0xf1, 0xcb, 0xe2, 0xf1, 0x18, 0xbf, 0x88, 0x4f, 0xc0, 0x7b, 0x08,
	0x86, 0x63, 0x49, 0x5a, 0x6d, 0x46, 0x9a, 0xbd, 0x91, 0xe6, 0x3a, 0x8e, 0x13, 0x60, 0x5f, 0x61,
	0x60, 0x5f, 0xc4, 0x4b, 0xc7, 0xec, 0x0c, 0x11, 0x4a, 0x4b, 0xb7, 0x1e, 0xec, 0x67, 0xd1, 0xde,
	0x7e, 0x16, 0xfd, 0xb1, 0x9f, 0x45, 0xdf, 0x1e, 0x64, 0x7b, 0xf6, 0x0e, 0xb2, 0x3d, 0xbf, 0x1c,
	0x64, 0x7b, 0xde, 0xb9, 0x1e, 0xff, 0xa1, 0x61, 0x95, 0xf4, 0x9c, 0x49, 0xd5, 0xda, 0xbc, 0xba,
	0x45, 0x8d, 0x6a, 0x85, 0x78, 0xbc, 0x78, 0x7e, 0x21, 0x17, 0xd4, 0x67, 0xbf, 0x3d, 0x4a, 0xe7,
	0xd8, 0x7f, 0xd4, 0xae, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xe2, 0xa0, 0x5d, 0x7e, 0x14,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// IncentivizedPackets returns all incentivized packets and their associated fees
	IncentivizedPackets(ctx context.Context, in *QueryIncentivizedPacketsRequest, opts ...grpc.CallOption) (*QueryIncentivizedPacketsResponse, error)
	// IncentivizedPacket returns all packet fees for a packet given its identifier
	IncentivizedPacket(ctx context.Context, in *QueryIncentivizedPacketRequest, opts ...grpc.CallOption) (*QueryIncentivizedPacketResponse, error)
	// Gets all incentivized packets for a specific channel
	IncentivizedPacketsForChannel(ctx context.Context, in *QueryIncentivizedPacketsForChannelRequest, opts ...grpc.CallOption) (*QueryIncentivizedPacketsForChannelResponse, error)
	// TotalRecvFees returns the total receive fees for a packet given its identifier
	TotalRecvFees(ctx context.Context, in *QueryTotalRecvFeesRequest, opts ...grpc.CallOption) (*QueryTotalRecvFeesResponse, error)
	// TotalAckFees returns the total acknowledgement fees for a packet given its identifier
	TotalAckFees(ctx context.Context, in *QueryTotalAckFeesRequest, opts ...grpc.CallOption) (*QueryTotalAckFeesResponse, error)
	// TotalTimeoutFees returns the total timeout fees for a packet given its identifier
	TotalTimeoutFees(ctx context.Context, in *QueryTotalTimeoutFeesRequest, opts ...grpc.CallOption) (*QueryTotalTimeoutFeesResponse, error)
	// Payee returns the registered payee address for a specific channel given the relayer address
	Payee(ctx context.Context, in *QueryPayeeRequest, opts ...grpc.CallOption) (*QueryPayeeResponse, error)
	// CounterpartyPayee returns the registered counterparty payee for forward relaying
	CounterpartyPayee(ctx context.Context, in *QueryCounterpartyPayeeRequest, opts ...grpc.CallOption) (*QueryCounterpartyPayeeResponse, error)
	// FeeEnabledChannels returns a list of all fee enabled channels
	FeeEnabledChannels(ctx context.Context, in *QueryFeeEnabledChannelsRequest, opts ...grpc.CallOption) (*QueryFeeEnabledChannelsResponse, error)
	// FeeEnabledChannel returns true if the provided port and channel identifiers belong to a fee enabled channel
	FeeEnabledChannel(ctx context.Context, in *QueryFeeEnabledChannelRequest, opts ...grpc.CallOption) (*QueryFeeEnabledChannelResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) IncentivizedPackets(ctx context.Context, in *QueryIncentivizedPacketsRequest, opts ...grpc.CallOption) (*QueryIncentivizedPacketsResponse, error) {
	out := new(QueryIncentivizedPacketsResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.fee.v1.Query/IncentivizedPackets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IncentivizedPacket(ctx context.Context, in *QueryIncentivizedPacketRequest, opts ...grpc.CallOption) (*QueryIncentivizedPacketResponse, error) {
	out := new(QueryIncentivizedPacketResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.fee.v1.Query/IncentivizedPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IncentivizedPacketsForChannel(ctx context.Context, in *QueryIncentivizedPacketsForChannelRequest, opts ...grpc.CallOption) (*QueryIncentivizedPacketsForChannelResponse, error) {
	out := new(QueryIncentivizedPacketsForChannelResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.fee.v1.Query/IncentivizedPacketsForChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalRecvFees(ctx context.Context, in *QueryTotalRecvFeesRequest, opts ...grpc.CallOption) (*QueryTotalRecvFeesResponse, error) {
	out := new(QueryTotalRecvFeesResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.fee.v1.Query/TotalRecvFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalAckFees(ctx context.Context, in *QueryTotalAckFeesRequest, opts ...grpc.CallOption) (*QueryTotalAckFeesResponse, error) {
	out := new(QueryTotalAckFeesResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.fee.v1.Query/TotalAckFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalTimeoutFees(ctx context.Context, in *QueryTotalTimeoutFeesRequest, opts ...grpc.CallOption) (*QueryTotalTimeoutFeesResponse, error) {
	out := new(QueryTotalTimeoutFeesResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.fee.v1.Query/TotalTimeoutFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Payee(ctx context.Context, in *QueryPayeeRequest, opts ...grpc.CallOption) (*QueryPayeeResponse, error) {
	out := new(QueryPayeeResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.fee.v1.Query/Payee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CounterpartyPayee(ctx context.Context, in *QueryCounterpartyPayeeRequest, opts ...grpc.CallOption) (*QueryCounterpartyPayeeResponse, error) {
	out := new(QueryCounterpartyPayeeResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.fee.v1.Query/CounterpartyPayee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeEnabledChannels(ctx context.Context, in *QueryFeeEnabledChannelsRequest, opts ...grpc.CallOption) (*QueryFeeEnabledChannelsResponse, error) {
	out := new(QueryFeeEnabledChannelsResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.fee.v1.Query/FeeEnabledChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeEnabledChannel(ctx context.Context, in *QueryFeeEnabledChannelRequest, opts ...grpc.CallOption) (*QueryFeeEnabledChannelResponse, error) {
	out := new(QueryFeeEnabledChannelResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.fee.v1.Query/FeeEnabledChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// IncentivizedPackets returns all incentivized packets and their associated fees
	IncentivizedPackets(context.Context, *QueryIncentivizedPacketsRequest) (*QueryIncentivizedPacketsResponse, error)
	// IncentivizedPacket returns all packet fees for a packet given its identifier
	IncentivizedPacket(context.Context, *QueryIncentivizedPacketRequest) (*QueryIncentivizedPacketResponse, error)
	// Gets all incentivized packets for a specific channel
	IncentivizedPacketsForChannel(context.Context, *QueryIncentivizedPacketsForChannelRequest) (*QueryIncentivizedPacketsForChannelResponse, error)
	// TotalRecvFees returns the total receive fees for a packet given its identifier
	TotalRecvFees(context.Context, *QueryTotalRecvFeesRequest) (*QueryTotalRecvFeesResponse, error)
	// TotalAckFees returns the total acknowledgement fees for a packet given its identifier
	TotalAckFees(context.Context, *QueryTotalAckFeesRequest) (*QueryTotalAckFeesResponse, error)
	// TotalTimeoutFees returns the total timeout fees for a packet given its identifier
	TotalTimeoutFees(context.Context, *QueryTotalTimeoutFeesRequest) (*QueryTotalTimeoutFeesResponse, error)
	// Payee returns the registered payee address for a specific channel given the relayer address
	Payee(context.Context, *QueryPayeeRequest) (*QueryPayeeResponse, error)
	// CounterpartyPayee returns the registered counterparty payee for forward relaying
	CounterpartyPayee(context.Context, *QueryCounterpartyPayeeRequest) (*QueryCounterpartyPayeeResponse, error)
	// FeeEnabledChannels returns a list of all fee enabled channels
	FeeEnabledChannels(context.Context, *QueryFeeEnabledChannelsRequest) (*QueryFeeEnabledChannelsResponse, error)
	// FeeEnabledChannel returns true if the provided port and channel identifiers belong to a fee enabled channel
	FeeEnabledChannel(context.Context, *QueryFeeEnabledChannelRequest) (*QueryFeeEnabledChannelResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) IncentivizedPackets(ctx context.Context, req *QueryIncentivizedPacketsRequest) (*QueryIncentivizedPacketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncentivizedPackets not implemented")
}
func (*UnimplementedQueryServer) IncentivizedPacket(ctx context.Context, req *QueryIncentivizedPacketRequest) (*QueryIncentivizedPacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncentivizedPacket not implemented")
}
func (*UnimplementedQueryServer) IncentivizedPacketsForChannel(ctx context.Context, req *QueryIncentivizedPacketsForChannelRequest) (*QueryIncentivizedPacketsForChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncentivizedPacketsForChannel not implemented")
}
func (*UnimplementedQueryServer) TotalRecvFees(ctx context.Context, req *QueryTotalRecvFeesRequest) (*QueryTotalRecvFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalRecvFees not implemented")
}
func (*UnimplementedQueryServer) TotalAckFees(ctx context.Context, req *QueryTotalAckFeesRequest) (*QueryTotalAckFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalAckFees not implemented")
}
func (*UnimplementedQueryServer) TotalTimeoutFees(ctx context.Context, req *QueryTotalTimeoutFeesRequest) (*QueryTotalTimeoutFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalTimeoutFees not implemented")
}
func (*UnimplementedQueryServer) Payee(ctx context.Context, req *QueryPayeeRequest) (*QueryPayeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Payee not implemented")
}
func (*UnimplementedQueryServer) CounterpartyPayee(ctx context.Context, req *QueryCounterpartyPayeeRequest) (*QueryCounterpartyPayeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CounterpartyPayee not implemented")
}
func (*UnimplementedQueryServer) FeeEnabledChannels(ctx context.Context, req *QueryFeeEnabledChannelsRequest) (*QueryFeeEnabledChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeEnabledChannels not implemented")
}
func (*UnimplementedQueryServer) FeeEnabledChannel(ctx context.Context, req *QueryFeeEnabledChannelRequest) (*QueryFeeEnabledChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeEnabledChannel not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_IncentivizedPackets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIncentivizedPacketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IncentivizedPackets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.fee.v1.Query/IncentivizedPackets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IncentivizedPackets(ctx, req.(*QueryIncentivizedPacketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IncentivizedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIncentivizedPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IncentivizedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.fee.v1.Query/IncentivizedPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IncentivizedPacket(ctx, req.(*QueryIncentivizedPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IncentivizedPacketsForChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIncentivizedPacketsForChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IncentivizedPacketsForChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.fee.v1.Query/IncentivizedPacketsForChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IncentivizedPacketsForChannel(ctx, req.(*QueryIncentivizedPacketsForChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalRecvFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalRecvFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalRecvFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.fee.v1.Query/TotalRecvFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalRecvFees(ctx, req.(*QueryTotalRecvFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalAckFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalAckFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalAckFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.fee.v1.Query/TotalAckFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalAckFees(ctx, req.(*QueryTotalAckFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalTimeoutFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalTimeoutFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalTimeoutFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.fee.v1.Query/TotalTimeoutFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalTimeoutFees(ctx, req.(*QueryTotalTimeoutFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Payee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPayeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Payee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.fee.v1.Query/Payee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Payee(ctx, req.(*QueryPayeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CounterpartyPayee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCounterpartyPayeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CounterpartyPayee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.fee.v1.Query/CounterpartyPayee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CounterpartyPayee(ctx, req.(*QueryCounterpartyPayeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeEnabledChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeEnabledChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeEnabledChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.fee.v1.Query/FeeEnabledChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeEnabledChannels(ctx, req.(*QueryFeeEnabledChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeEnabledChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeEnabledChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeEnabledChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.fee.v1.Query/FeeEnabledChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeEnabledChannel(ctx, req.(*QueryFeeEnabledChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.applications.fee.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncentivizedPackets",
			Handler:    _Query_IncentivizedPackets_Handler,
		},
		{
			MethodName: "IncentivizedPacket",
			Handler:    _Query_IncentivizedPacket_Handler,
		},
		{
			MethodName: "IncentivizedPacketsForChannel",
			Handler:    _Query_IncentivizedPacketsForChannel_Handler,
		},
		{
			MethodName: "TotalRecvFees",
			Handler:    _Query_TotalRecvFees_Handler,
		},
		{
			MethodName: "TotalAckFees",
			Handler:    _Query_TotalAckFees_Handler,
		},
		{
			MethodName: "TotalTimeoutFees",
			Handler:    _Query_TotalTimeoutFees_Handler,
		},
		{
			MethodName: "Payee",
			Handler:    _Query_Payee_Handler,
		},
		{
			MethodName: "CounterpartyPayee",
			Handler:    _Query_CounterpartyPayee_Handler,
		},
		{
			MethodName: "FeeEnabledChannels",
			Handler:    _Query_FeeEnabledChannels_Handler,
		},
		{
			MethodName: "FeeEnabledChannel",
			Handler:    _Query_FeeEnabledChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/applications/fee/v1/query.proto",
}

func (m *QueryIncentivizedPacketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivizedPacketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivizedPacketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIncentivizedPacketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivizedPacketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivizedPacketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IncentivizedPackets) > 0 {
		for iNdEx := len(m.IncentivizedPackets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncentivizedPackets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIncentivizedPacketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivizedPacketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivizedPacketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryHeight))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.PacketId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryIncentivizedPacketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivizedPacketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivizedPacketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IncentivizedPacket.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryIncentivizedPacketsForChannelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivizedPacketsForChannelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivizedPacketsForChannelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIncentivizedPacketsForChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivizedPacketsForChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivizedPacketsForChannelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IncentivizedPackets) > 0 {
		for iNdEx := len(m.IncentivizedPackets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncentivizedPackets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalRecvFeesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalRecvFeesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalRecvFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PacketId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalRecvFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalRecvFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalRecvFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecvFees) > 0 {
		for iNdEx := len(m.RecvFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecvFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalAckFeesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalAckFeesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalAckFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PacketId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalAckFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalAckFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalAckFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AckFees) > 0 {
		for iNdEx := len(m.AckFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AckFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalTimeoutFeesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalTimeoutFeesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalTimeoutFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PacketId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalTimeoutFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalTimeoutFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalTimeoutFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimeoutFees) > 0 {
		for iNdEx := len(m.TimeoutFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimeoutFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPayeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPayeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPayeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Relayer) > 0 {
		i -= len(m.Relayer)
		copy(dAtA[i:], m.Relayer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Relayer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPayeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPayeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPayeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PayeeAddress) > 0 {
		i -= len(m.PayeeAddress)
		copy(dAtA[i:], m.PayeeAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PayeeAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCounterpartyPayeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCounterpartyPayeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCounterpartyPayeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Relayer) > 0 {
		i -= len(m.Relayer)
		copy(dAtA[i:], m.Relayer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Relayer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCounterpartyPayeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCounterpartyPayeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCounterpartyPayeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CounterpartyPayee) > 0 {
		i -= len(m.CounterpartyPayee)
		copy(dAtA[i:], m.CounterpartyPayee)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CounterpartyPayee)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeEnabledChannelsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeEnabledChannelsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeEnabledChannelsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeEnabledChannelsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeEnabledChannelsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeEnabledChannelsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeeEnabledChannels) > 0 {
		for iNdEx := len(m.FeeEnabledChannels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeEnabledChannels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeEnabledChannelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeEnabledChannelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeEnabledChannelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeEnabledChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeEnabledChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeEnabledChannelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeEnabled {
		i--
		if m.FeeEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryIncentivizedPacketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.QueryHeight != 0 {
		n += 1 + sovQuery(uint64(m.QueryHeight))
	}
	return n
}

func (m *QueryIncentivizedPacketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IncentivizedPackets) > 0 {
		for _, e := range m.IncentivizedPackets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIncentivizedPacketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PacketId.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.QueryHeight != 0 {
		n += 1 + sovQuery(uint64(m.QueryHeight))
	}
	return n
}

func (m *QueryIncentivizedPacketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IncentivizedPacket.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryIncentivizedPacketsForChannelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.QueryHeight != 0 {
		n += 1 + sovQuery(uint64(m.QueryHeight))
	}
	return n
}

func (m *QueryIncentivizedPacketsForChannelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IncentivizedPackets) > 0 {
		for _, e := range m.IncentivizedPackets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalRecvFeesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PacketId.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalRecvFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RecvFees) > 0 {
		for _, e := range m.RecvFees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTotalAckFeesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PacketId.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalAckFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AckFees) > 0 {
		for _, e := range m.AckFees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTotalTimeoutFeesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PacketId.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalTimeoutFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TimeoutFees) > 0 {
		for _, e := range m.TimeoutFees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPayeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Relayer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPayeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PayeeAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCounterpartyPayeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Relayer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCounterpartyPayeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CounterpartyPayee)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeeEnabledChannelsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.QueryHeight != 0 {
		n += 1 + sovQuery(uint64(m.QueryHeight))
	}
	return n
}

func (m *QueryFeeEnabledChannelsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeEnabledChannels) > 0 {
		for _, e := range m.FeeEnabledChannels {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeeEnabledChannelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeeEnabledChannelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeEnabled {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryIncentivizedPacketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivizedPacketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivizedPacketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryHeight", wireType)
			}
			m.QueryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentivizedPacketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivizedPacketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivizedPacketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivizedPackets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncentivizedPackets = append(m.IncentivizedPackets, IdentifiedPacketFees{})
			if err := m.IncentivizedPackets[len(m.IncentivizedPackets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentivizedPacketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivizedPacketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivizedPacketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PacketId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryHeight", wireType)
			}
			m.QueryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentivizedPacketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivizedPacketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivizedPacketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivizedPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncentivizedPacket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentivizedPacketsForChannelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivizedPacketsForChannelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivizedPacketsForChannelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryHeight", wireType)
			}
			m.QueryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentivizedPacketsForChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivizedPacketsForChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivizedPacketsForChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivizedPackets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncentivizedPackets = append(m.IncentivizedPackets, &IdentifiedPacketFees{})
			if err := m.IncentivizedPackets[len(m.IncentivizedPackets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalRecvFeesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalRecvFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalRecvFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PacketId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalRecvFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalRecvFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalRecvFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvFees = append(m.RecvFees, types1.Coin{})
			if err := m.RecvFees[len(m.RecvFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalAckFeesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalAckFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalAckFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PacketId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalAckFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalAckFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalAckFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckFees = append(m.AckFees, types1.Coin{})
			if err := m.AckFees[len(m.AckFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalTimeoutFeesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalTimeoutFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalTimeoutFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PacketId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalTimeoutFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalTimeoutFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalTimeoutFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeoutFees = append(m.TimeoutFees, types1.Coin{})
			if err := m.TimeoutFees[len(m.TimeoutFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPayeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPayeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPayeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPayeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPayeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPayeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayeeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayeeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCounterpartyPayeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCounterpartyPayeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCounterpartyPayeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCounterpartyPayeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCounterpartyPayeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCounterpartyPayeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyPayee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyPayee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeEnabledChannelsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeEnabledChannelsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeEnabledChannelsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryHeight", wireType)
			}
			m.QueryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeEnabledChannelsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeEnabledChannelsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeEnabledChannelsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeEnabledChannels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeEnabledChannels = append(m.FeeEnabledChannels, FeeEnabledChannel{})
			if err := m.FeeEnabledChannels[len(m.FeeEnabledChannels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeEnabledChannelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeEnabledChannelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeEnabledChannelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeEnabledChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeEnabledChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeEnabledChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FeeEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
