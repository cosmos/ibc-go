name: Build Simd Image
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'The tag of the image to build'
        required: true
        type: string
      ibc-go-version:
        description: 'The ibc-go version to be added as a label'
        required: true
        type: string

env:
   REGISTRY: ghcr.io
   ORG: cosmos
   IMAGE_NAME: ibc-go-simd
   GIT_TAG: "${{ inputs.tag }}"

jobs:
    build-image-at-tag:
      runs-on: ubuntu-latest
      permissions:
        packages: write
        contents: read
      steps:
         - uses: actions/checkout@v4
           with:
            ref: "${{ env.GIT_TAG }}"
            fetch-depth: 0

         # Validate input version format
         - name: Validate version format
           run: |
             if [[ ! "${{ inputs.ibc-go-version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
               echo "Invalid version format. Expected format: vX.Y.Z or vX.Y.Z-suffix"
               exit 1
             fi

         - name: Log in to the Container registry
           uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
           with:
              registry: ${{ env.REGISTRY }}
              username: ${{ github.actor }}
              password: ${{ secrets.GITHUB_TOKEN }}

         # Build and push the image with sanitized tag
         - name: Build and push image
           run: |
            # Sanitize docker tag by replacing invalid characters with dash
            docker_tag="$(echo $GIT_TAG | sed 's/[^a-zA-Z0-9\.]/-/g')"
            
            # Build with additional metadata labels
            docker build . \
              -t "${REGISTRY}/${ORG}/${IMAGE_NAME}:${docker_tag}" \
              --build-arg IBC_GO_VERSION=${{ inputs.ibc-go-version }} \
              --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
              --label "org.opencontainers.image.version=${docker_tag}" \
              --label "org.opencontainers.image.source=https://github.com/cosmos/ibc-go"

            # Test the built image
            echo "Testing image functionality..."
            docker run --rm "${REGISTRY}/${ORG}/${IMAGE_NAME}:${docker_tag}" version

            # Push image if tests pass
            docker push "${REGISTRY}/${ORG}/${IMAGE_NAME}:${docker_tag}"
