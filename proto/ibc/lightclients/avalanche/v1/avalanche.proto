syntax = "proto3";

package ibc.lightclients.avalanche.v1;


option go_package = "github.com/cosmos/ibc-go/v8/modules/light-clients/14-avalanche;avalanche";

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "cosmos/ics23/v1/proofs.proto";
import "google/protobuf/timestamp.proto";
import "ibc/core/client/v1/client.proto";
import "ibc/core/commitment/v1/commitment.proto";

// ClientState defines the 14-avalanche client state
message ClientState {
  option (gogoproto.goproto_getters) = false;

  // chain_id it is uniq identifaer of chain 
  string chain_id   = 1;
  // network_id it is uniq identifaer of network 
  uint32 network_id = 2;

  // trust_level it is ratio between sinersWeight and totalWeight sufficient for validate tx
  Fraction trust_level = 3 [(gogoproto.nullable) = false];
  // duration of the period since the LastestTimestamp during which the
  // submitted headers are valid for upgrade
  google.protobuf.Duration trusting_period = 4 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
  // defines how much new (untrusted) header's Time can drift into the future.
  google.protobuf.Duration max_clock_drift = 5 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
  // Block height when the client was frozen due to a misbehaviour
  ibc.core.client.v1.Height frozen_height = 6 [(gogoproto.nullable) = false];
  // the latest block height
  ibc.core.client.v1.Height latest_height = 7 [(gogoproto.nullable) = false];
  // proof it is view of database to confirm the presence of data in the database
  repeated bytes proof = 8;

  // it is key in database of being checked value
  string upgrade_path = 9;
}

// ConsensusState defines the consensus state from Tendermint.
message ConsensusState {
  option (gogoproto.goproto_getters) = false;

  // timestamp that corresponds to the block height in which the ConsensusState
  // was stored.
  google.protobuf.Timestamp timestamp = 1 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  // commitment root (i.e app hash)
  bytes storage_root         = 2;
  // signed byte of storage_root to check 
  bytes signed_storage_root  = 3;
  // signed in warp backend avalanche and got by p2p network to verify validator set
  bytes signed_validator_set = 4;

  // list of validator from avalanche with would sorted and marshaled to verify by  signed_validator_set
  repeated Validator vdrs          = 5;
  // it is index of sorted vdrs, it can be used to verify ratio between sinersWeight and totalWeight, and for aggregate public key
  bytes              signers_input = 6;
}

// Fraction defines the protobuf message type for tmmath.Fraction that only
// supports positive values.
message Fraction {
  uint64 numerator   = 1;
  uint64 denominator = 2;
}

message Misbehaviour {
  option (gogoproto.goproto_getters) = false;
  // header witch 
  Header header_1 = 2 [(gogoproto.customname) = "Header1"];
  Header header_2 = 3 [(gogoproto.customname) = "Header2"];
}
// structure to description valid update of light client state  
message Header {
  // previus subnet header
  SubnetHeader prev_subnet_header = 1;
  // actual subnet header
  SubnetHeader subnet_header      = 2;
  // actual pchain header
  PchainHeader pchain_header      = 3;

  // commitment root (i.e app hash)
  bytes              storage_root         = 4;
  // signed byte of storage_root to check 
  bytes              signed_storage_root  = 5;
  // signed in warp backend avalanche and got by p2p network to verify validator set
  bytes              signed_validator_set = 6;
  // list of validator from avalanche with would sorted and marshaled to verify by  signed_validator_set
  repeated Validator vdrs                 = 7;
  // it is index of sorted vdrs, it can be used to verify ratio between sinersWeight and totalWeight, and for aggregate public key
  bytes              signers_input        = 8;
}


// structure to description subnet new block
message SubnetHeader {
  // new height of subnet evm
  ibc.core.client.v1.Height height     = 1;
  // timestamp of update
  google.protobuf.Timestamp timestamp  = 2 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  // hash of new block
  bytes                     block_hash = 3;
  // height of pchain when new block of subnet evm was created
  ibc.core.client.v1.Height pchain_height = 4;
  // actual pchain validators set
  repeated Validator        pchain_vdrs   = 5;
}

// structure to description subnet new block
message PchainHeader {
  ibc.core.client.v1.Height height     = 1;
  // timestamp of update
  google.protobuf.Timestamp timestamp  = 2 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];  
  // hash of new block
  bytes                     block_hash = 3;
}
//  
message Validator {
  // validator public key
  bytes                     public_key_byte = 1;
  // validator weight
  uint64                    weight          = 3;
  // nodeIDs where is validator exist
  repeated bytes            nodeIDs         = 4;
}

message MerkleKey {
  string key = 1;
}